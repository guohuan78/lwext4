/* automatically generated by rust-bindgen 0.65.1 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::core::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::core::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::core::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::core::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::core::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const CONFIG_USE_DEFAULT_CONFIG: u32 = 0;
pub const CONFIG_HAVE_OWN_OFLAGS: u32 = 0;
pub const CONFIG_HAVE_OWN_ERRNO: u32 = 0;
pub const CONFIG_HAVE_OWN_ASSERT: u32 = 0;
pub const CONFIG_BLOCK_DEV_CACHE_SIZE: u32 = 16;
pub const F_SET_EXT2: u32 = 2;
pub const F_SET_EXT3: u32 = 3;
pub const F_SET_EXT4: u32 = 4;
pub const CONFIG_EXT_FEATURE_SET_LVL: u32 = 4;
pub const CONFIG_JOURNALING_ENABLE: u32 = 1;
pub const CONFIG_XATTR_ENABLE: u32 = 1;
pub const CONFIG_EXTENTS_ENABLE: u32 = 1;
pub const CONFIG_DEBUG_PRINTF: u32 = 1;
pub const CONFIG_DEBUG_ASSERT: u32 = 1;
pub const CONFIG_BLOCK_DEV_ENABLE_STATS: u32 = 1;
pub const CONFIG_EXT4_MAX_BLOCKDEV_NAME: u32 = 32;
pub const CONFIG_EXT4_BLOCKDEVS_COUNT: u32 = 2;
pub const CONFIG_EXT4_MAX_MP_NAME: u32 = 32;
pub const CONFIG_EXT4_MOUNTPOINTS_COUNT: u32 = 2;
pub const CONFIG_MAX_TRUNCATE_SIZE: u32 = 16777216;
pub const CONFIG_UNALIGNED_ACCESS: u32 = 0;
pub const CONFIG_USE_USER_MALLOC: u32 = 0;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const SPLAY_NEGINF: i32 = -1;
pub const SPLAY_INF: u32 = 1;
pub const RB_BLACK: u32 = 0;
pub const RB_RED: u32 = 1;
pub const RB_NEGINF: i32 = -1;
pub const RB_INF: u32 = 1;
pub const EXT4_CHECKSUM_CRC32C: u32 = 1;
pub const UUID_SIZE: u32 = 16;
pub const EXT4_SUPERBLOCK_MAGIC: u32 = 61267;
pub const EXT4_SUPERBLOCK_SIZE: u32 = 1024;
pub const EXT4_SUPERBLOCK_OFFSET: u32 = 1024;
pub const EXT4_SUPERBLOCK_OS_LINUX: u32 = 0;
pub const EXT4_SUPERBLOCK_OS_HURD: u32 = 1;
pub const EXT4_SUPERBLOCK_FLAGS_SIGNED_HASH: u32 = 1;
pub const EXT4_SUPERBLOCK_FLAGS_UNSIGNED_HASH: u32 = 2;
pub const EXT4_SUPERBLOCK_FLAGS_TEST_FILESYS: u32 = 4;
pub const EXT4_SUPERBLOCK_STATE_VALID_FS: u32 = 1;
pub const EXT4_SUPERBLOCK_STATE_ERROR_FS: u32 = 2;
pub const EXT4_SUPERBLOCK_STATE_ORPHAN_FS: u32 = 4;
pub const EXT4_SUPERBLOCK_ERRORS_CONTINUE: u32 = 1;
pub const EXT4_SUPERBLOCK_ERRORS_RO: u32 = 2;
pub const EXT4_SUPERBLOCK_ERRORS_PANIC: u32 = 3;
pub const EXT4_FCOM_DIR_PREALLOC: u32 = 1;
pub const EXT4_FCOM_IMAGIC_INODES: u32 = 2;
pub const EXT4_FCOM_HAS_JOURNAL: u32 = 4;
pub const EXT4_FCOM_EXT_ATTR: u32 = 8;
pub const EXT4_FCOM_RESIZE_INODE: u32 = 16;
pub const EXT4_FCOM_DIR_INDEX: u32 = 32;
pub const EXT4_FRO_COM_SPARSE_SUPER: u32 = 1;
pub const EXT4_FRO_COM_LARGE_FILE: u32 = 2;
pub const EXT4_FRO_COM_BTREE_DIR: u32 = 4;
pub const EXT4_FRO_COM_HUGE_FILE: u32 = 8;
pub const EXT4_FRO_COM_GDT_CSUM: u32 = 16;
pub const EXT4_FRO_COM_DIR_NLINK: u32 = 32;
pub const EXT4_FRO_COM_EXTRA_ISIZE: u32 = 64;
pub const EXT4_FRO_COM_QUOTA: u32 = 256;
pub const EXT4_FRO_COM_BIGALLOC: u32 = 512;
pub const EXT4_FRO_COM_METADATA_CSUM: u32 = 1024;
pub const EXT4_FINCOM_COMPRESSION: u32 = 1;
pub const EXT4_FINCOM_FILETYPE: u32 = 2;
pub const EXT4_FINCOM_RECOVER: u32 = 4;
pub const EXT4_FINCOM_JOURNAL_DEV: u32 = 8;
pub const EXT4_FINCOM_META_BG: u32 = 16;
pub const EXT4_FINCOM_EXTENTS: u32 = 64;
pub const EXT4_FINCOM_64BIT: u32 = 128;
pub const EXT4_FINCOM_MMP: u32 = 256;
pub const EXT4_FINCOM_FLEX_BG: u32 = 512;
pub const EXT4_FINCOM_EA_INODE: u32 = 1024;
pub const EXT4_FINCOM_DIRDATA: u32 = 4096;
pub const EXT4_FINCOM_BG_USE_META_CSUM: u32 = 8192;
pub const EXT4_FINCOM_LARGEDIR: u32 = 16384;
pub const EXT4_FINCOM_INLINE_DATA: u32 = 32768;
pub const EXT2_SUPPORTED_FCOM: u32 = 0;
pub const EXT2_SUPPORTED_FINCOM: u32 = 18;
pub const EXT2_SUPPORTED_FRO_COM: u32 = 3;
pub const EXT3_SUPPORTED_FCOM: u32 = 32;
pub const EXT3_SUPPORTED_FINCOM: u32 = 18;
pub const EXT3_SUPPORTED_FRO_COM: u32 = 3;
pub const EXT4_SUPPORTED_FCOM: u32 = 32;
pub const EXT4_SUPPORTED_FINCOM: u32 = 722;
pub const EXT4_SUPPORTED_FRO_COM: u32 = 1147;
pub const EXT_FINCOM_IGNORED: u32 = 260;
pub const EXT4_BLOCK_GROUP_INODE_UNINIT: u32 = 1;
pub const EXT4_BLOCK_GROUP_BLOCK_UNINIT: u32 = 2;
pub const EXT4_BLOCK_GROUP_ITABLE_ZEROED: u32 = 4;
pub const EXT4_MIN_BLOCK_GROUP_DESCRIPTOR_SIZE: u32 = 32;
pub const EXT4_MAX_BLOCK_GROUP_DESCRIPTOR_SIZE: u32 = 64;
pub const EXT4_MIN_BLOCK_SIZE: u32 = 1024;
pub const EXT4_MAX_BLOCK_SIZE: u32 = 65536;
pub const EXT4_REV0_INODE_SIZE: u32 = 128;
pub const EXT4_INODE_BLOCK_SIZE: u32 = 512;
pub const EXT4_INODE_DIRECT_BLOCK_COUNT: u32 = 12;
pub const EXT4_INODE_INDIRECT_BLOCK: u32 = 12;
pub const EXT4_INODE_DOUBLE_INDIRECT_BLOCK: u32 = 13;
pub const EXT4_INODE_TRIPPLE_INDIRECT_BLOCK: u32 = 14;
pub const EXT4_INODE_BLOCKS: u32 = 15;
pub const EXT4_INODE_INDIRECT_BLOCK_COUNT: u32 = 3;
pub const EXT4_INODE_MODE_FIFO: u32 = 4096;
pub const EXT4_INODE_MODE_CHARDEV: u32 = 8192;
pub const EXT4_INODE_MODE_DIRECTORY: u32 = 16384;
pub const EXT4_INODE_MODE_BLOCKDEV: u32 = 24576;
pub const EXT4_INODE_MODE_FILE: u32 = 32768;
pub const EXT4_INODE_MODE_SOFTLINK: u32 = 40960;
pub const EXT4_INODE_MODE_SOCKET: u32 = 49152;
pub const EXT4_INODE_MODE_TYPE_MASK: u32 = 61440;
pub const EXT4_INODE_FLAG_SECRM: u32 = 1;
pub const EXT4_INODE_FLAG_UNRM: u32 = 2;
pub const EXT4_INODE_FLAG_COMPR: u32 = 4;
pub const EXT4_INODE_FLAG_SYNC: u32 = 8;
pub const EXT4_INODE_FLAG_IMMUTABLE: u32 = 16;
pub const EXT4_INODE_FLAG_APPEND: u32 = 32;
pub const EXT4_INODE_FLAG_NODUMP: u32 = 64;
pub const EXT4_INODE_FLAG_NOATIME: u32 = 128;
pub const EXT4_INODE_FLAG_DIRTY: u32 = 256;
pub const EXT4_INODE_FLAG_COMPRBLK: u32 = 512;
pub const EXT4_INODE_FLAG_NOCOMPR: u32 = 1024;
pub const EXT4_INODE_FLAG_ECOMPR: u32 = 2048;
pub const EXT4_INODE_FLAG_INDEX: u32 = 4096;
pub const EXT4_INODE_FLAG_IMAGIC: u32 = 8192;
pub const EXT4_INODE_FLAG_JOURNAL_DATA: u32 = 16384;
pub const EXT4_INODE_FLAG_NOTAIL: u32 = 32768;
pub const EXT4_INODE_FLAG_DIRSYNC: u32 = 65536;
pub const EXT4_INODE_FLAG_TOPDIR: u32 = 131072;
pub const EXT4_INODE_FLAG_HUGE_FILE: u32 = 262144;
pub const EXT4_INODE_FLAG_EXTENTS: u32 = 524288;
pub const EXT4_INODE_FLAG_EA_INODE: u32 = 2097152;
pub const EXT4_INODE_FLAG_EOFBLOCKS: u32 = 4194304;
pub const EXT4_INODE_FLAG_RESERVED: u32 = 2147483648;
pub const EXT4_INODE_ROOT_INDEX: u32 = 2;
pub const EXT4_DIRECTORY_FILENAME_LEN: u32 = 255;
pub const EXT4_DIRENTRY_DIR_CSUM: u32 = 222;
pub const EXT4_ERR_BAD_DX_DIR: i32 = -25000;
pub const EXT4_LINK_MAX: u32 = 65000;
pub const EXT4_BAD_INO: u32 = 1;
pub const EXT4_ROOT_INO: u32 = 2;
pub const EXT4_BOOT_LOADER_INO: u32 = 5;
pub const EXT4_UNDEL_DIR_INO: u32 = 6;
pub const EXT4_RESIZE_INO: u32 = 7;
pub const EXT4_JOURNAL_INO: u32 = 8;
pub const EXT4_GOOD_OLD_FIRST_INO: u32 = 11;
pub const EXT2_HTREE_LEGACY: u32 = 0;
pub const EXT2_HTREE_HALF_MD4: u32 = 1;
pub const EXT2_HTREE_TEA: u32 = 2;
pub const EXT2_HTREE_LEGACY_UNSIGNED: u32 = 3;
pub const EXT2_HTREE_HALF_MD4_UNSIGNED: u32 = 4;
pub const EXT2_HTREE_TEA_UNSIGNED: u32 = 5;
pub const EXT2_HTREE_EOF: u32 = 2147483647;
pub const EXT4_GOOD_OLD_INODE_SIZE: u32 = 128;
pub const JBD_MAGIC_NUMBER: u32 = 3225106840;
pub const JBD_DESCRIPTOR_BLOCK: u32 = 1;
pub const JBD_COMMIT_BLOCK: u32 = 2;
pub const JBD_SUPERBLOCK: u32 = 3;
pub const JBD_SUPERBLOCK_V2: u32 = 4;
pub const JBD_REVOKE_BLOCK: u32 = 5;
pub const JBD_CRC32_CHKSUM: u32 = 1;
pub const JBD_MD5_CHKSUM: u32 = 2;
pub const JBD_SHA1_CHKSUM: u32 = 3;
pub const JBD_CRC32C_CHKSUM: u32 = 4;
pub const JBD_CRC32_CHKSUM_SIZE: u32 = 4;
pub const JBD_FLAG_ESCAPE: u32 = 1;
pub const JBD_FLAG_SAME_UUID: u32 = 2;
pub const JBD_FLAG_DELETED: u32 = 4;
pub const JBD_FLAG_LAST_TAG: u32 = 8;
pub const JBD_USERS_MAX: u32 = 48;
pub const JBD_USERS_SIZE: u32 = 768;
pub const JBD_FEATURE_COMPAT_CHECKSUM: u32 = 1;
pub const JBD_FEATURE_INCOMPAT_REVOKE: u32 = 1;
pub const JBD_FEATURE_INCOMPAT_64BIT: u32 = 2;
pub const JBD_FEATURE_INCOMPAT_ASYNC_COMMIT: u32 = 4;
pub const JBD_FEATURE_INCOMPAT_CSUM_V2: u32 = 8;
pub const JBD_FEATURE_INCOMPAT_CSUM_V3: u32 = 16;
pub const JBD_KNOWN_COMPAT_FEATURES: u32 = 0;
pub const JBD_KNOWN_ROCOMPAT_FEATURES: u32 = 0;
pub const JBD_KNOWN_INCOMPAT_FEATURES: u32 = 31;
pub const EXT4_CRC32_INIT: u32 = 4294967295;
pub const _ERRNO_H: u32 = 1;
pub const _BITS_ERRNO_H: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
pub const EOK: u32 = 0;
pub const _UNISTD_H: u32 = 1;
pub const _POSIX_VERSION: u32 = 200809;
pub const __POSIX2_THIS_VERSION: u32 = 200809;
pub const _POSIX2_VERSION: u32 = 200809;
pub const _POSIX2_C_VERSION: u32 = 200809;
pub const _POSIX2_C_BIND: u32 = 200809;
pub const _POSIX2_C_DEV: u32 = 200809;
pub const _POSIX2_SW_DEV: u32 = 200809;
pub const _POSIX2_LOCALEDEF: u32 = 200809;
pub const _XOPEN_VERSION: u32 = 700;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _XOPEN_XPG2: u32 = 1;
pub const _XOPEN_XPG3: u32 = 1;
pub const _XOPEN_XPG4: u32 = 1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: u32 = 1;
pub const _BITS_POSIX_OPT_H: u32 = 1;
pub const _POSIX_JOB_CONTROL: u32 = 1;
pub const _POSIX_SAVED_IDS: u32 = 1;
pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
pub const _POSIX_FSYNC: u32 = 200809;
pub const _POSIX_MAPPED_FILES: u32 = 200809;
pub const _POSIX_MEMLOCK: u32 = 200809;
pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
pub const _POSIX_VDISABLE: u8 = 0u8;
pub const _POSIX_NO_TRUNC: u32 = 1;
pub const _XOPEN_REALTIME: u32 = 1;
pub const _XOPEN_REALTIME_THREADS: u32 = 1;
pub const _XOPEN_SHM: u32 = 1;
pub const _POSIX_THREADS: u32 = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
pub const _POSIX_SEMAPHORES: u32 = 200809;
pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
pub const _POSIX_ASYNC_IO: u32 = 1;
pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
pub const _LFS_LARGEFILE: u32 = 1;
pub const _LFS64_LARGEFILE: u32 = 1;
pub const _LFS64_STDIO: u32 = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
pub const _POSIX_CPUTIME: u32 = 0;
pub const _POSIX_THREAD_CPUTIME: u32 = 0;
pub const _POSIX_REGEXP: u32 = 1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
pub const _POSIX_SHELL: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 200809;
pub const _POSIX_SPIN_LOCKS: u32 = 200809;
pub const _POSIX_SPAWN: u32 = 200809;
pub const _POSIX_TIMERS: u32 = 200809;
pub const _POSIX_BARRIERS: u32 = 200809;
pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
pub const _POSIX_ADVISORY_INFO: u32 = 200809;
pub const _POSIX_IPV6: u32 = 200809;
pub const _POSIX_RAW_SOCKETS: u32 = 200809;
pub const _POSIX2_CHAR_TERM: u32 = 200809;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const __ILP32_OFF32_CFLAGS: &[u8; 5usize] = b"-m32\0";
pub const __ILP32_OFF32_LDFLAGS: &[u8; 5usize] = b"-m32\0";
pub const __ILP32_OFFBIG_CFLAGS: &[u8; 48usize] =
    b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0";
pub const __ILP32_OFFBIG_LDFLAGS: &[u8; 5usize] = b"-m32\0";
pub const __LP64_OFF64_CFLAGS: &[u8; 5usize] = b"-m64\0";
pub const __LP64_OFF64_LDFLAGS: &[u8; 5usize] = b"-m64\0";
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const _GETOPT_POSIX_H: u32 = 1;
pub const _GETOPT_CORE_H: u32 = 1;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const _FCNTL_H: u32 = 1;
pub const __O_LARGEFILE: u32 = 0;
pub const F_GETLK64: u32 = 5;
pub const F_SETLK64: u32 = 6;
pub const F_SETLKW64: u32 = 7;
pub const O_ACCMODE: u32 = 3;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_CREAT: u32 = 64;
pub const O_EXCL: u32 = 128;
pub const O_NOCTTY: u32 = 256;
pub const O_TRUNC: u32 = 512;
pub const O_APPEND: u32 = 1024;
pub const O_NONBLOCK: u32 = 2048;
pub const O_NDELAY: u32 = 2048;
pub const O_SYNC: u32 = 1052672;
pub const O_FSYNC: u32 = 1052672;
pub const O_ASYNC: u32 = 8192;
pub const __O_DIRECTORY: u32 = 65536;
pub const __O_NOFOLLOW: u32 = 131072;
pub const __O_CLOEXEC: u32 = 524288;
pub const __O_DIRECT: u32 = 16384;
pub const __O_NOATIME: u32 = 262144;
pub const __O_PATH: u32 = 2097152;
pub const __O_DSYNC: u32 = 4096;
pub const __O_TMPFILE: u32 = 4259840;
pub const F_GETLK: u32 = 5;
pub const F_SETLK: u32 = 6;
pub const F_SETLKW: u32 = 7;
pub const O_DIRECTORY: u32 = 65536;
pub const O_NOFOLLOW: u32 = 131072;
pub const O_CLOEXEC: u32 = 524288;
pub const O_DSYNC: u32 = 4096;
pub const O_RSYNC: u32 = 1052672;
pub const F_DUPFD: u32 = 0;
pub const F_GETFD: u32 = 1;
pub const F_SETFD: u32 = 2;
pub const F_GETFL: u32 = 3;
pub const F_SETFL: u32 = 4;
pub const __F_SETOWN: u32 = 8;
pub const __F_GETOWN: u32 = 9;
pub const F_SETOWN: u32 = 8;
pub const F_GETOWN: u32 = 9;
pub const __F_SETSIG: u32 = 10;
pub const __F_GETSIG: u32 = 11;
pub const __F_SETOWN_EX: u32 = 15;
pub const __F_GETOWN_EX: u32 = 16;
pub const F_DUPFD_CLOEXEC: u32 = 1030;
pub const FD_CLOEXEC: u32 = 1;
pub const F_RDLCK: u32 = 0;
pub const F_WRLCK: u32 = 1;
pub const F_UNLCK: u32 = 2;
pub const F_EXLCK: u32 = 4;
pub const F_SHLCK: u32 = 8;
pub const LOCK_SH: u32 = 1;
pub const LOCK_EX: u32 = 2;
pub const LOCK_NB: u32 = 4;
pub const LOCK_UN: u32 = 8;
pub const FAPPEND: u32 = 1024;
pub const FFSYNC: u32 = 1052672;
pub const FASYNC: u32 = 8192;
pub const FNONBLOCK: u32 = 2048;
pub const FNDELAY: u32 = 2048;
pub const __POSIX_FADV_DONTNEED: u32 = 4;
pub const __POSIX_FADV_NOREUSE: u32 = 5;
pub const POSIX_FADV_NORMAL: u32 = 0;
pub const POSIX_FADV_RANDOM: u32 = 1;
pub const POSIX_FADV_SEQUENTIAL: u32 = 2;
pub const POSIX_FADV_WILLNEED: u32 = 3;
pub const POSIX_FADV_DONTNEED: u32 = 4;
pub const POSIX_FADV_NOREUSE: u32 = 5;
pub const AT_FDCWD: i32 = -100;
pub const AT_SYMLINK_NOFOLLOW: u32 = 256;
pub const AT_REMOVEDIR: u32 = 512;
pub const AT_SYMLINK_FOLLOW: u32 = 1024;
pub const AT_EACCESS: u32 = 512;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const __time_t_defined: u32 = 1;
pub const _BITS_STAT_H: u32 = 1;
pub const _BITS_STRUCT_STAT_H: u32 = 1;
pub const __S_IFMT: u32 = 61440;
pub const __S_IFDIR: u32 = 16384;
pub const __S_IFCHR: u32 = 8192;
pub const __S_IFBLK: u32 = 24576;
pub const __S_IFREG: u32 = 32768;
pub const __S_IFIFO: u32 = 4096;
pub const __S_IFLNK: u32 = 40960;
pub const __S_IFSOCK: u32 = 49152;
pub const __S_ISUID: u32 = 2048;
pub const __S_ISGID: u32 = 1024;
pub const __S_ISVTX: u32 = 512;
pub const __S_IREAD: u32 = 256;
pub const __S_IWRITE: u32 = 128;
pub const __S_IEXEC: u32 = 64;
pub const UTIME_NOW: u32 = 1073741823;
pub const UTIME_OMIT: u32 = 1073741822;
pub const S_IFMT: u32 = 61440;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFIFO: u32 = 4096;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXU: u32 = 448;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXG: u32 = 56;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_IRWXO: u32 = 7;
pub const _ASSERT_H: u32 = 1;
pub const _INTTYPES_H: u32 = 1;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &[u8; 2usize] = b"l\0";
pub const __PRIPTR_PREFIX: &[u8; 2usize] = b"l\0";
pub const PRId8: &[u8; 2usize] = b"d\0";
pub const PRId16: &[u8; 2usize] = b"d\0";
pub const PRId32: &[u8; 2usize] = b"d\0";
pub const PRId64: &[u8; 3usize] = b"ld\0";
pub const PRIdLEAST8: &[u8; 2usize] = b"d\0";
pub const PRIdLEAST16: &[u8; 2usize] = b"d\0";
pub const PRIdLEAST32: &[u8; 2usize] = b"d\0";
pub const PRIdLEAST64: &[u8; 3usize] = b"ld\0";
pub const PRIdFAST8: &[u8; 2usize] = b"d\0";
pub const PRIdFAST16: &[u8; 3usize] = b"ld\0";
pub const PRIdFAST32: &[u8; 3usize] = b"ld\0";
pub const PRIdFAST64: &[u8; 3usize] = b"ld\0";
pub const PRIi8: &[u8; 2usize] = b"i\0";
pub const PRIi16: &[u8; 2usize] = b"i\0";
pub const PRIi32: &[u8; 2usize] = b"i\0";
pub const PRIi64: &[u8; 3usize] = b"li\0";
pub const PRIiLEAST8: &[u8; 2usize] = b"i\0";
pub const PRIiLEAST16: &[u8; 2usize] = b"i\0";
pub const PRIiLEAST32: &[u8; 2usize] = b"i\0";
pub const PRIiLEAST64: &[u8; 3usize] = b"li\0";
pub const PRIiFAST8: &[u8; 2usize] = b"i\0";
pub const PRIiFAST16: &[u8; 3usize] = b"li\0";
pub const PRIiFAST32: &[u8; 3usize] = b"li\0";
pub const PRIiFAST64: &[u8; 3usize] = b"li\0";
pub const PRIo8: &[u8; 2usize] = b"o\0";
pub const PRIo16: &[u8; 2usize] = b"o\0";
pub const PRIo32: &[u8; 2usize] = b"o\0";
pub const PRIo64: &[u8; 3usize] = b"lo\0";
pub const PRIoLEAST8: &[u8; 2usize] = b"o\0";
pub const PRIoLEAST16: &[u8; 2usize] = b"o\0";
pub const PRIoLEAST32: &[u8; 2usize] = b"o\0";
pub const PRIoLEAST64: &[u8; 3usize] = b"lo\0";
pub const PRIoFAST8: &[u8; 2usize] = b"o\0";
pub const PRIoFAST16: &[u8; 3usize] = b"lo\0";
pub const PRIoFAST32: &[u8; 3usize] = b"lo\0";
pub const PRIoFAST64: &[u8; 3usize] = b"lo\0";
pub const PRIu8: &[u8; 2usize] = b"u\0";
pub const PRIu16: &[u8; 2usize] = b"u\0";
pub const PRIu32: &[u8; 2usize] = b"u\0";
pub const PRIu64: &[u8; 3usize] = b"lu\0";
pub const PRIuLEAST8: &[u8; 2usize] = b"u\0";
pub const PRIuLEAST16: &[u8; 2usize] = b"u\0";
pub const PRIuLEAST32: &[u8; 2usize] = b"u\0";
pub const PRIuLEAST64: &[u8; 3usize] = b"lu\0";
pub const PRIuFAST8: &[u8; 2usize] = b"u\0";
pub const PRIuFAST16: &[u8; 3usize] = b"lu\0";
pub const PRIuFAST32: &[u8; 3usize] = b"lu\0";
pub const PRIuFAST64: &[u8; 3usize] = b"lu\0";
pub const PRIx8: &[u8; 2usize] = b"x\0";
pub const PRIx16: &[u8; 2usize] = b"x\0";
pub const PRIx32: &[u8; 2usize] = b"x\0";
pub const PRIx64: &[u8; 3usize] = b"lx\0";
pub const PRIxLEAST8: &[u8; 2usize] = b"x\0";
pub const PRIxLEAST16: &[u8; 2usize] = b"x\0";
pub const PRIxLEAST32: &[u8; 2usize] = b"x\0";
pub const PRIxLEAST64: &[u8; 3usize] = b"lx\0";
pub const PRIxFAST8: &[u8; 2usize] = b"x\0";
pub const PRIxFAST16: &[u8; 3usize] = b"lx\0";
pub const PRIxFAST32: &[u8; 3usize] = b"lx\0";
pub const PRIxFAST64: &[u8; 3usize] = b"lx\0";
pub const PRIX8: &[u8; 2usize] = b"X\0";
pub const PRIX16: &[u8; 2usize] = b"X\0";
pub const PRIX32: &[u8; 2usize] = b"X\0";
pub const PRIX64: &[u8; 3usize] = b"lX\0";
pub const PRIXLEAST8: &[u8; 2usize] = b"X\0";
pub const PRIXLEAST16: &[u8; 2usize] = b"X\0";
pub const PRIXLEAST32: &[u8; 2usize] = b"X\0";
pub const PRIXLEAST64: &[u8; 3usize] = b"lX\0";
pub const PRIXFAST8: &[u8; 2usize] = b"X\0";
pub const PRIXFAST16: &[u8; 3usize] = b"lX\0";
pub const PRIXFAST32: &[u8; 3usize] = b"lX\0";
pub const PRIXFAST64: &[u8; 3usize] = b"lX\0";
pub const PRIdMAX: &[u8; 3usize] = b"ld\0";
pub const PRIiMAX: &[u8; 3usize] = b"li\0";
pub const PRIoMAX: &[u8; 3usize] = b"lo\0";
pub const PRIuMAX: &[u8; 3usize] = b"lu\0";
pub const PRIxMAX: &[u8; 3usize] = b"lx\0";
pub const PRIXMAX: &[u8; 3usize] = b"lX\0";
pub const PRIdPTR: &[u8; 3usize] = b"ld\0";
pub const PRIiPTR: &[u8; 3usize] = b"li\0";
pub const PRIoPTR: &[u8; 3usize] = b"lo\0";
pub const PRIuPTR: &[u8; 3usize] = b"lu\0";
pub const PRIxPTR: &[u8; 3usize] = b"lx\0";
pub const PRIXPTR: &[u8; 3usize] = b"lX\0";
pub const SCNd8: &[u8; 4usize] = b"hhd\0";
pub const SCNd16: &[u8; 3usize] = b"hd\0";
pub const SCNd32: &[u8; 2usize] = b"d\0";
pub const SCNd64: &[u8; 3usize] = b"ld\0";
pub const SCNdLEAST8: &[u8; 4usize] = b"hhd\0";
pub const SCNdLEAST16: &[u8; 3usize] = b"hd\0";
pub const SCNdLEAST32: &[u8; 2usize] = b"d\0";
pub const SCNdLEAST64: &[u8; 3usize] = b"ld\0";
pub const SCNdFAST8: &[u8; 4usize] = b"hhd\0";
pub const SCNdFAST16: &[u8; 3usize] = b"ld\0";
pub const SCNdFAST32: &[u8; 3usize] = b"ld\0";
pub const SCNdFAST64: &[u8; 3usize] = b"ld\0";
pub const SCNi8: &[u8; 4usize] = b"hhi\0";
pub const SCNi16: &[u8; 3usize] = b"hi\0";
pub const SCNi32: &[u8; 2usize] = b"i\0";
pub const SCNi64: &[u8; 3usize] = b"li\0";
pub const SCNiLEAST8: &[u8; 4usize] = b"hhi\0";
pub const SCNiLEAST16: &[u8; 3usize] = b"hi\0";
pub const SCNiLEAST32: &[u8; 2usize] = b"i\0";
pub const SCNiLEAST64: &[u8; 3usize] = b"li\0";
pub const SCNiFAST8: &[u8; 4usize] = b"hhi\0";
pub const SCNiFAST16: &[u8; 3usize] = b"li\0";
pub const SCNiFAST32: &[u8; 3usize] = b"li\0";
pub const SCNiFAST64: &[u8; 3usize] = b"li\0";
pub const SCNu8: &[u8; 4usize] = b"hhu\0";
pub const SCNu16: &[u8; 3usize] = b"hu\0";
pub const SCNu32: &[u8; 2usize] = b"u\0";
pub const SCNu64: &[u8; 3usize] = b"lu\0";
pub const SCNuLEAST8: &[u8; 4usize] = b"hhu\0";
pub const SCNuLEAST16: &[u8; 3usize] = b"hu\0";
pub const SCNuLEAST32: &[u8; 2usize] = b"u\0";
pub const SCNuLEAST64: &[u8; 3usize] = b"lu\0";
pub const SCNuFAST8: &[u8; 4usize] = b"hhu\0";
pub const SCNuFAST16: &[u8; 3usize] = b"lu\0";
pub const SCNuFAST32: &[u8; 3usize] = b"lu\0";
pub const SCNuFAST64: &[u8; 3usize] = b"lu\0";
pub const SCNo8: &[u8; 4usize] = b"hho\0";
pub const SCNo16: &[u8; 3usize] = b"ho\0";
pub const SCNo32: &[u8; 2usize] = b"o\0";
pub const SCNo64: &[u8; 3usize] = b"lo\0";
pub const SCNoLEAST8: &[u8; 4usize] = b"hho\0";
pub const SCNoLEAST16: &[u8; 3usize] = b"ho\0";
pub const SCNoLEAST32: &[u8; 2usize] = b"o\0";
pub const SCNoLEAST64: &[u8; 3usize] = b"lo\0";
pub const SCNoFAST8: &[u8; 4usize] = b"hho\0";
pub const SCNoFAST16: &[u8; 3usize] = b"lo\0";
pub const SCNoFAST32: &[u8; 3usize] = b"lo\0";
pub const SCNoFAST64: &[u8; 3usize] = b"lo\0";
pub const SCNx8: &[u8; 4usize] = b"hhx\0";
pub const SCNx16: &[u8; 3usize] = b"hx\0";
pub const SCNx32: &[u8; 2usize] = b"x\0";
pub const SCNx64: &[u8; 3usize] = b"lx\0";
pub const SCNxLEAST8: &[u8; 4usize] = b"hhx\0";
pub const SCNxLEAST16: &[u8; 3usize] = b"hx\0";
pub const SCNxLEAST32: &[u8; 2usize] = b"x\0";
pub const SCNxLEAST64: &[u8; 3usize] = b"lx\0";
pub const SCNxFAST8: &[u8; 4usize] = b"hhx\0";
pub const SCNxFAST16: &[u8; 3usize] = b"lx\0";
pub const SCNxFAST32: &[u8; 3usize] = b"lx\0";
pub const SCNxFAST64: &[u8; 3usize] = b"lx\0";
pub const SCNdMAX: &[u8; 3usize] = b"ld\0";
pub const SCNiMAX: &[u8; 3usize] = b"li\0";
pub const SCNoMAX: &[u8; 3usize] = b"lo\0";
pub const SCNuMAX: &[u8; 3usize] = b"lu\0";
pub const SCNxMAX: &[u8; 3usize] = b"lx\0";
pub const SCNdPTR: &[u8; 3usize] = b"ld\0";
pub const SCNiPTR: &[u8; 3usize] = b"li\0";
pub const SCNoPTR: &[u8; 3usize] = b"lo\0";
pub const SCNuPTR: &[u8; 3usize] = b"lu\0";
pub const SCNxPTR: &[u8; 3usize] = b"lx\0";
pub const DEBUG_BALLOC: u32 = 1;
pub const DEBUG_BCACHE: u32 = 2;
pub const DEBUG_BITMAP: u32 = 4;
pub const DEBUG_BLOCK_GROUP: u32 = 8;
pub const DEBUG_BLOCKDEV: u32 = 16;
pub const DEBUG_DIR_IDX: u32 = 32;
pub const DEBUG_DIR: u32 = 64;
pub const DEBUG_EXTENT: u32 = 128;
pub const DEBUG_FS: u32 = 256;
pub const DEBUG_HASH: u32 = 512;
pub const DEBUG_IALLOC: u32 = 1024;
pub const DEBUG_INODE: u32 = 2048;
pub const DEBUG_SUPER: u32 = 4096;
pub const DEBUG_XATTR: u32 = 8192;
pub const DEBUG_MKFS: u32 = 16384;
pub const DEBUG_EXT4: u32 = 32768;
pub const DEBUG_JBD: u32 = 65536;
pub const DEBUG_MBR: u32 = 131072;
pub const DEBUG_NOPREFIX: u32 = 2147483648;
pub const DEBUG_ALL: u32 = 4294967295;
pub const DBG_NONE: &[u8; 1usize] = b"\0";
pub const DBG_INFO: &[u8; 9usize] = b"[info]  \0";
pub const DBG_WARN: &[u8; 9usize] = b"[warn]  \0";
pub const DBG_ERROR: &[u8; 9usize] = b"[error] \0";
pub const _STDIO_H: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const P_tmpdir: &[u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub type __u_char = ::core::ffi::c_uchar;
pub type __u_short = ::core::ffi::c_ushort;
pub type __u_int = ::core::ffi::c_uint;
pub type __u_long = ::core::ffi::c_ulong;
pub type __int8_t = ::core::ffi::c_schar;
pub type __uint8_t = ::core::ffi::c_uchar;
pub type __int16_t = ::core::ffi::c_short;
pub type __uint16_t = ::core::ffi::c_ushort;
pub type __int32_t = ::core::ffi::c_int;
pub type __uint32_t = ::core::ffi::c_uint;
pub type __int64_t = ::core::ffi::c_long;
pub type __uint64_t = ::core::ffi::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::core::ffi::c_long;
pub type __u_quad_t = ::core::ffi::c_ulong;
pub type __intmax_t = ::core::ffi::c_long;
pub type __uintmax_t = ::core::ffi::c_ulong;
pub type __dev_t = ::core::ffi::c_ulong;
pub type __uid_t = ::core::ffi::c_uint;
pub type __gid_t = ::core::ffi::c_uint;
pub type __ino_t = ::core::ffi::c_ulong;
pub type __ino64_t = ::core::ffi::c_ulong;
pub type __mode_t = ::core::ffi::c_uint;
pub type __nlink_t = ::core::ffi::c_ulong;
pub type __off_t = ::core::ffi::c_long;
pub type __off64_t = ::core::ffi::c_long;
pub type __pid_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::core::ffi::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::core::mem::MaybeUninit<__fsid_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::core::ffi::c_long;
pub type __rlim_t = ::core::ffi::c_ulong;
pub type __rlim64_t = ::core::ffi::c_ulong;
pub type __id_t = ::core::ffi::c_uint;
pub type __time_t = ::core::ffi::c_long;
pub type __useconds_t = ::core::ffi::c_uint;
pub type __suseconds_t = ::core::ffi::c_long;
pub type __suseconds64_t = ::core::ffi::c_long;
pub type __daddr_t = ::core::ffi::c_int;
pub type __key_t = ::core::ffi::c_int;
pub type __clockid_t = ::core::ffi::c_int;
pub type __timer_t = *mut ::core::ffi::c_void;
pub type __blksize_t = ::core::ffi::c_long;
pub type __blkcnt_t = ::core::ffi::c_long;
pub type __blkcnt64_t = ::core::ffi::c_long;
pub type __fsblkcnt_t = ::core::ffi::c_ulong;
pub type __fsblkcnt64_t = ::core::ffi::c_ulong;
pub type __fsfilcnt_t = ::core::ffi::c_ulong;
pub type __fsfilcnt64_t = ::core::ffi::c_ulong;
pub type __fsword_t = ::core::ffi::c_long;
pub type __ssize_t = ::core::ffi::c_long;
pub type __syscall_slong_t = ::core::ffi::c_long;
pub type __syscall_ulong_t = ::core::ffi::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::core::ffi::c_char;
pub type __intptr_t = ::core::ffi::c_long;
pub type __socklen_t = ::core::ffi::c_uint;
pub type __sig_atomic_t = ::core::ffi::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::core::ffi::c_schar;
pub type int_fast16_t = ::core::ffi::c_long;
pub type int_fast32_t = ::core::ffi::c_long;
pub type int_fast64_t = ::core::ffi::c_long;
pub type uint_fast8_t = ::core::ffi::c_uchar;
pub type uint_fast16_t = ::core::ffi::c_ulong;
pub type uint_fast32_t = ::core::ffi::c_ulong;
pub type uint_fast64_t = ::core::ffi::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type wchar_t = ::core::ffi::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::core::ffi::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::core::mem::MaybeUninit<max_align_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::core::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
#[doc = "@brief   Single block descriptor"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_block {
    #[doc = "@brief   Logical block ID"]
    pub lb_id: u64,
    #[doc = "@brief   Buffer"]
    pub buf: *mut ext4_buf,
    #[doc = "@brief   Data buffer."]
    pub data: *mut u8,
}
#[test]
fn bindgen_test_layout_ext4_block() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_block> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_block>(),
        24usize,
        concat!("Size of: ", stringify!(ext4_block))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_block>(),
        8usize,
        concat!("Alignment of ", stringify!(ext4_block))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lb_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_block),
            "::",
            stringify!(lb_id)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_block),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_block),
            "::",
            stringify!(data)
        )
    );
}
#[doc = "@brief   Single block descriptor"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_buf {
    #[doc = "@brief   Flags"]
    pub flags: ::core::ffi::c_int,
    #[doc = "@brief   Logical block address"]
    pub lba: u64,
    #[doc = "@brief   Data buffer."]
    pub data: *mut u8,
    #[doc = "@brief   LRU priority. (unused)"]
    pub lru_prio: u32,
    #[doc = "@brief   LRU id."]
    pub lru_id: u32,
    #[doc = "@brief   Reference count table"]
    pub refctr: u32,
    #[doc = "@brief   The block cache this buffer belongs to."]
    pub bc: *mut ext4_bcache,
    #[doc = "@brief   Whether or not buffer is on dirty list."]
    pub on_dirty_list: bool,
    #[doc = "@brief   LBA tree node"]
    pub lba_node: ext4_buf__bindgen_ty_1,
    #[doc = "@brief   LRU tree node"]
    pub lru_node: ext4_buf__bindgen_ty_2,
    #[doc = "@brief   Dirty list node"]
    pub dirty_node: ext4_buf__bindgen_ty_3,
    #[doc = "@brief   Callback routine after a disk-write operation.\n @param   bc block cache descriptor\n @param   buf buffer descriptor\n @param   standard error code returned by bdev->bwrite()\n @param   arg argument passed to this routine"]
    pub end_write: ::core::option::Option<
        unsafe extern "C" fn(
            bc: *mut ext4_bcache,
            buf: *mut ext4_buf,
            res: ::core::ffi::c_int,
            arg: *mut ::core::ffi::c_void,
        ),
    >,
    #[doc = "@brief   argument passed to end_write() callback."]
    pub end_write_arg: *mut ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_buf__bindgen_ty_1 {
    pub rbe_left: *mut ext4_buf,
    pub rbe_right: *mut ext4_buf,
    pub rbe_parent: *mut ext4_buf,
    pub rbe_color: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_ext4_buf__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_buf__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_buf__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(ext4_buf__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_buf__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ext4_buf__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rbe_left) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf__bindgen_ty_1),
            "::",
            stringify!(rbe_left)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rbe_right) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf__bindgen_ty_1),
            "::",
            stringify!(rbe_right)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rbe_parent) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf__bindgen_ty_1),
            "::",
            stringify!(rbe_parent)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rbe_color) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf__bindgen_ty_1),
            "::",
            stringify!(rbe_color)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_buf__bindgen_ty_2 {
    pub rbe_left: *mut ext4_buf,
    pub rbe_right: *mut ext4_buf,
    pub rbe_parent: *mut ext4_buf,
    pub rbe_color: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_ext4_buf__bindgen_ty_2() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_buf__bindgen_ty_2> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_buf__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(ext4_buf__bindgen_ty_2))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_buf__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(ext4_buf__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rbe_left) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf__bindgen_ty_2),
            "::",
            stringify!(rbe_left)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rbe_right) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf__bindgen_ty_2),
            "::",
            stringify!(rbe_right)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rbe_parent) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf__bindgen_ty_2),
            "::",
            stringify!(rbe_parent)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rbe_color) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf__bindgen_ty_2),
            "::",
            stringify!(rbe_color)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_buf__bindgen_ty_3 {
    pub sle_next: *mut ext4_buf,
}
#[test]
fn bindgen_test_layout_ext4_buf__bindgen_ty_3() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_buf__bindgen_ty_3> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_buf__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(ext4_buf__bindgen_ty_3))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_buf__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(ext4_buf__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sle_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf__bindgen_ty_3),
            "::",
            stringify!(sle_next)
        )
    );
}
#[test]
fn bindgen_test_layout_ext4_buf() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_buf> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_buf>(),
        144usize,
        concat!("Size of: ", stringify!(ext4_buf))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_buf>(),
        8usize,
        concat!("Alignment of ", stringify!(ext4_buf))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lba) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf),
            "::",
            stringify!(lba)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lru_prio) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf),
            "::",
            stringify!(lru_prio)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lru_id) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf),
            "::",
            stringify!(lru_id)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).refctr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf),
            "::",
            stringify!(refctr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bc) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf),
            "::",
            stringify!(bc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).on_dirty_list) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf),
            "::",
            stringify!(on_dirty_list)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lba_node) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf),
            "::",
            stringify!(lba_node)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lru_node) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf),
            "::",
            stringify!(lru_node)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dirty_node) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf),
            "::",
            stringify!(dirty_node)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).end_write) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf),
            "::",
            stringify!(end_write)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).end_write_arg) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf),
            "::",
            stringify!(end_write_arg)
        )
    );
}
#[doc = "@brief   Block cache descriptor"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_bcache {
    #[doc = "@brief   Item count in block cache"]
    pub cnt: u32,
    #[doc = "@brief   Item size in block cache"]
    pub itemsize: u32,
    #[doc = "@brief   Last recently used counter"]
    pub lru_ctr: u32,
    #[doc = "@brief   Currently referenced datablocks"]
    pub ref_blocks: u32,
    #[doc = "@brief   Maximum referenced datablocks"]
    pub max_ref_blocks: u32,
    #[doc = "@brief   The blockdev binded to this block cache"]
    pub bdev: *mut ext4_blockdev,
    #[doc = "@brief   The cache should not be shaked"]
    pub dont_shake: bool,
    #[doc = "@brief   A tree holding all bufs"]
    pub lba_root: ext4_bcache_ext4_buf_lba,
    #[doc = "@brief   A tree holding unreferenced bufs"]
    pub lru_root: ext4_bcache_ext4_buf_lru,
    #[doc = "@brief   A singly-linked list holding dirty buffers"]
    pub dirty_list: ext4_bcache_ext4_buf_dirty,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_bcache_ext4_buf_lba {
    pub rbh_root: *mut ext4_buf,
}
#[test]
fn bindgen_test_layout_ext4_bcache_ext4_buf_lba() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_bcache_ext4_buf_lba> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_bcache_ext4_buf_lba>(),
        8usize,
        concat!("Size of: ", stringify!(ext4_bcache_ext4_buf_lba))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_bcache_ext4_buf_lba>(),
        8usize,
        concat!("Alignment of ", stringify!(ext4_bcache_ext4_buf_lba))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rbh_root) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bcache_ext4_buf_lba),
            "::",
            stringify!(rbh_root)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_bcache_ext4_buf_lru {
    pub rbh_root: *mut ext4_buf,
}
#[test]
fn bindgen_test_layout_ext4_bcache_ext4_buf_lru() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_bcache_ext4_buf_lru> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_bcache_ext4_buf_lru>(),
        8usize,
        concat!("Size of: ", stringify!(ext4_bcache_ext4_buf_lru))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_bcache_ext4_buf_lru>(),
        8usize,
        concat!("Alignment of ", stringify!(ext4_bcache_ext4_buf_lru))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rbh_root) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bcache_ext4_buf_lru),
            "::",
            stringify!(rbh_root)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_bcache_ext4_buf_dirty {
    pub slh_first: *mut ext4_buf,
}
#[test]
fn bindgen_test_layout_ext4_bcache_ext4_buf_dirty() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_bcache_ext4_buf_dirty> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_bcache_ext4_buf_dirty>(),
        8usize,
        concat!("Size of: ", stringify!(ext4_bcache_ext4_buf_dirty))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_bcache_ext4_buf_dirty>(),
        8usize,
        concat!("Alignment of ", stringify!(ext4_bcache_ext4_buf_dirty))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).slh_first) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bcache_ext4_buf_dirty),
            "::",
            stringify!(slh_first)
        )
    );
}
#[test]
fn bindgen_test_layout_ext4_bcache() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_bcache> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_bcache>(),
        64usize,
        concat!("Size of: ", stringify!(ext4_bcache))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_bcache>(),
        8usize,
        concat!("Alignment of ", stringify!(ext4_bcache))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cnt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bcache),
            "::",
            stringify!(cnt)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).itemsize) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bcache),
            "::",
            stringify!(itemsize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lru_ctr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bcache),
            "::",
            stringify!(lru_ctr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ref_blocks) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bcache),
            "::",
            stringify!(ref_blocks)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).max_ref_blocks) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bcache),
            "::",
            stringify!(max_ref_blocks)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bdev) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bcache),
            "::",
            stringify!(bdev)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dont_shake) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bcache),
            "::",
            stringify!(dont_shake)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lba_root) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bcache),
            "::",
            stringify!(lba_root)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lru_root) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bcache),
            "::",
            stringify!(lru_root)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dirty_list) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bcache),
            "::",
            stringify!(dirty_list)
        )
    );
}
pub const bcache_state_bits_BC_UPTODATE: bcache_state_bits = 0;
pub const bcache_state_bits_BC_DIRTY: bcache_state_bits = 1;
pub const bcache_state_bits_BC_FLUSH: bcache_state_bits = 2;
pub const bcache_state_bits_BC_TMP: bcache_state_bits = 3;
#[doc = "@brief buffer state bits\n\n  - BC♡UPTODATE: Buffer contains valid data.\n  - BC_DIRTY: Buffer is dirty.\n  - BC_FLUSH: Buffer will be immediately flushed,\n              when no one references it.\n  - BC_TMP: Buffer will be dropped once its refctr\n            reaches zero."]
pub type bcache_state_bits = ::core::ffi::c_uint;
extern "C" {
    #[doc = "@brief   Dynamic initialization of block cache.\n @param   bc block cache descriptor\n @param   cnt items count in block cache\n @param   itemsize single item size (in bytes)\n @return  standard error code"]
    pub fn ext4_bcache_init_dynamic(
        bc: *mut ext4_bcache,
        cnt: u32,
        itemsize: u32,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Do cleanup works on block cache.\n @param   bc block cache descriptor."]
    pub fn ext4_bcache_cleanup(bc: *mut ext4_bcache);
}
extern "C" {
    #[doc = "@brief   Dynamic de-initialization of block cache.\n @param   bc block cache descriptor\n @return  standard error code"]
    pub fn ext4_bcache_fini_dynamic(bc: *mut ext4_bcache) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Get a buffer with the lowest LRU counter in bcache.\n @param   bc block cache descriptor\n @return  buffer with the lowest LRU counter"]
    pub fn ext4_buf_lowest_lru(bc: *mut ext4_bcache) -> *mut ext4_buf;
}
extern "C" {
    #[doc = "@brief   Drop unreferenced buffer from bcache.\n @param   bc block cache descriptor\n @param   buf buffer"]
    pub fn ext4_bcache_drop_buf(bc: *mut ext4_bcache, buf: *mut ext4_buf);
}
extern "C" {
    #[doc = "@brief   Invalidate a buffer.\n @param   bc block cache descriptor\n @param   buf buffer"]
    pub fn ext4_bcache_invalidate_buf(bc: *mut ext4_bcache, buf: *mut ext4_buf);
}
extern "C" {
    #[doc = "@brief   Invalidate a range of buffers.\n @param   bc block cache descriptor\n @param   from starting lba\n @param   cnt block counts"]
    pub fn ext4_bcache_invalidate_lba(bc: *mut ext4_bcache, from: u64, cnt: u32);
}
extern "C" {
    #[doc = "@brief   Find existing buffer from block cache memory.\n          Unreferenced block allocation is based on LRU\n          (Last Recently Used) algorithm.\n @param   bc block cache descriptor\n @param   b block to alloc\n @param   lba logical block address\n @return  block cache buffer"]
    pub fn ext4_bcache_find_get(
        bc: *mut ext4_bcache,
        b: *mut ext4_block,
        lba: u64,
    ) -> *mut ext4_buf;
}
extern "C" {
    #[doc = "@brief   Allocate block from block cache memory.\n          Unreferenced block allocation is based on LRU\n          (Last Recently Used) algorithm.\n @param   bc block cache descriptor\n @param   b block to alloc\n @param   is_new block is new (needs to be read)\n @return  standard error code"]
    pub fn ext4_bcache_alloc(
        bc: *mut ext4_bcache,
        b: *mut ext4_block,
        is_new: *mut bool,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Free block from cache memory (decrement reference counter).\n @param   bc block cache descriptor\n @param   b block to free\n @return  standard error code"]
    pub fn ext4_bcache_free(bc: *mut ext4_bcache, b: *mut ext4_block) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Return a full status of block cache.\n @param   bc block cache descriptor\n @return  full status"]
    pub fn ext4_bcache_is_full(bc: *mut ext4_bcache) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_blockdev_iface {
    #[doc = "@brief   Open device function\n @param   bdev block device."]
    pub open: ::core::option::Option<
        unsafe extern "C" fn(bdev: *mut ext4_blockdev) -> ::core::ffi::c_int,
    >,
    #[doc = "@brief   Block read function.\n @param   bdev block device\n @param   buf output buffer\n @param   blk_id block id\n @param   blk_cnt block count"]
    pub bread: ::core::option::Option<
        unsafe extern "C" fn(
            bdev: *mut ext4_blockdev,
            buf: *mut ::core::ffi::c_void,
            blk_id: u64,
            blk_cnt: u32,
        ) -> ::core::ffi::c_int,
    >,
    #[doc = "@brief   Block write function.\n @param   buf input buffer\n @param   blk_id block id\n @param   blk_cnt block count"]
    pub bwrite: ::core::option::Option<
        unsafe extern "C" fn(
            bdev: *mut ext4_blockdev,
            buf: *const ::core::ffi::c_void,
            blk_id: u64,
            blk_cnt: u32,
        ) -> ::core::ffi::c_int,
    >,
    #[doc = "@brief   Close device function.\n @param   bdev block device."]
    pub close: ::core::option::Option<
        unsafe extern "C" fn(bdev: *mut ext4_blockdev) -> ::core::ffi::c_int,
    >,
    #[doc = "@brief   Lock block device. Required in multi partition mode\n          operations. Not mandatory field.\n @param   bdev block device."]
    pub lock: ::core::option::Option<
        unsafe extern "C" fn(bdev: *mut ext4_blockdev) -> ::core::ffi::c_int,
    >,
    #[doc = "@brief   Unlock block device. Required in multi partition mode\n          operations. Not mandatory field.\n @param   bdev block device."]
    pub unlock: ::core::option::Option<
        unsafe extern "C" fn(bdev: *mut ext4_blockdev) -> ::core::ffi::c_int,
    >,
    #[doc = "@brief   Block size (bytes): physical"]
    pub ph_bsize: u32,
    #[doc = "@brief   Block count: physical"]
    pub ph_bcnt: u64,
    #[doc = "@brief   Block size buffer: physical"]
    pub ph_bbuf: *mut u8,
    #[doc = "@brief   Reference counter to block device interface"]
    pub ph_refctr: u32,
    #[doc = "@brief   Physical read counter"]
    pub bread_ctr: u32,
    #[doc = "@brief   Physical write counter"]
    pub bwrite_ctr: u32,
    #[doc = "@brief   User data pointer"]
    pub p_user: *mut ::core::ffi::c_void,
}
#[test]
fn bindgen_test_layout_ext4_blockdev_iface() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_blockdev_iface> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_blockdev_iface>(),
        96usize,
        concat!("Size of: ", stringify!(ext4_blockdev_iface))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_blockdev_iface>(),
        8usize,
        concat!("Alignment of ", stringify!(ext4_blockdev_iface))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).open) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev_iface),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bread) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev_iface),
            "::",
            stringify!(bread)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bwrite) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev_iface),
            "::",
            stringify!(bwrite)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev_iface),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev_iface),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).unlock) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev_iface),
            "::",
            stringify!(unlock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ph_bsize) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev_iface),
            "::",
            stringify!(ph_bsize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ph_bcnt) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev_iface),
            "::",
            stringify!(ph_bcnt)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ph_bbuf) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev_iface),
            "::",
            stringify!(ph_bbuf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ph_refctr) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev_iface),
            "::",
            stringify!(ph_refctr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bread_ctr) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev_iface),
            "::",
            stringify!(bread_ctr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bwrite_ctr) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev_iface),
            "::",
            stringify!(bwrite_ctr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).p_user) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev_iface),
            "::",
            stringify!(p_user)
        )
    );
}
#[doc = "@brief   Definition of the simple block device."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_blockdev {
    #[doc = "@brief Block device interface"]
    pub bdif: *mut ext4_blockdev_iface,
    #[doc = "@brief Offset in bdif. For multi partition mode."]
    pub part_offset: u64,
    #[doc = "@brief Part size in bdif. For multi partition mode."]
    pub part_size: u64,
    #[doc = "@brief   Block cache."]
    pub bc: *mut ext4_bcache,
    #[doc = "@brief   Block size (bytes) logical"]
    pub lg_bsize: u32,
    #[doc = "@brief   Block count: logical"]
    pub lg_bcnt: u64,
    #[doc = "@brief   Cache write back mode reference counter"]
    pub cache_write_back: u32,
    #[doc = "@brief   The filesystem this block device belongs to."]
    pub fs: *mut ext4_fs,
    pub journal: *mut ::core::ffi::c_void,
}
#[test]
fn bindgen_test_layout_ext4_blockdev() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_blockdev> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_blockdev>(),
        72usize,
        concat!("Size of: ", stringify!(ext4_blockdev))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_blockdev>(),
        8usize,
        concat!("Alignment of ", stringify!(ext4_blockdev))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bdif) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev),
            "::",
            stringify!(bdif)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).part_offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev),
            "::",
            stringify!(part_offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).part_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev),
            "::",
            stringify!(part_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bc) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev),
            "::",
            stringify!(bc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lg_bsize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev),
            "::",
            stringify!(lg_bsize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lg_bcnt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev),
            "::",
            stringify!(lg_bcnt)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cache_write_back) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev),
            "::",
            stringify!(cache_write_back)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fs) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev),
            "::",
            stringify!(fs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).journal) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev),
            "::",
            stringify!(journal)
        )
    );
}
extern "C" {
    #[doc = "@brief   Block device initialization.\n @param   bdev block device descriptor\n @return  standard error code"]
    pub fn ext4_block_init(bdev: *mut ext4_blockdev) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Binds a bcache to block device.\n @param   bdev block device descriptor\n @param   bc block cache descriptor\n @return  standard error code"]
    pub fn ext4_block_bind_bcache(
        bdev: *mut ext4_blockdev,
        bc: *mut ext4_bcache,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Close block device\n @param   bdev block device descriptor\n @return  standard error code"]
    pub fn ext4_block_fini(bdev: *mut ext4_blockdev) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Flush data in given buffer to disk.\n @param   bdev block device descriptor\n @param   buf buffer\n @return  standard error code"]
    pub fn ext4_block_flush_buf(bdev: *mut ext4_blockdev, buf: *mut ext4_buf)
        -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Flush data in buffer of given lba to disk,\n          if that buffer exists in block cache.\n @param   bdev block device descriptor\n @param   lba logical block address\n @return  standard error code"]
    pub fn ext4_block_flush_lba(bdev: *mut ext4_blockdev, lba: u64) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Set logical block size in block device.\n @param   bdev block device descriptor\n @param   lb_bsize logical block size (in bytes)"]
    pub fn ext4_block_set_lb_size(bdev: *mut ext4_blockdev, lb_bsize: u32);
}
extern "C" {
    #[doc = "@brief   Block get function (through cache, don't read).\n @param   bdev block device descriptor\n @param   b block descriptor\n @param   lba logical block address\n @return  standard error code"]
    pub fn ext4_block_get_noread(
        bdev: *mut ext4_blockdev,
        b: *mut ext4_block,
        lba: u64,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Block get function (through cache).\n @param   bdev block device descriptor\n @param   b block descriptor\n @param   lba logical block address\n @return  standard error code"]
    pub fn ext4_block_get(
        bdev: *mut ext4_blockdev,
        b: *mut ext4_block,
        lba: u64,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Block set procedure (through cache).\n @param   bdev block device descriptor\n @param   b block descriptor\n @return  standard error code"]
    pub fn ext4_block_set(bdev: *mut ext4_blockdev, b: *mut ext4_block) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Block read procedure (without cache)\n @param   bdev block device descriptor\n @param   buf output buffer\n @param   lba logical block address\n @return  standard error code"]
    pub fn ext4_blocks_get_direct(
        bdev: *mut ext4_blockdev,
        buf: *mut ::core::ffi::c_void,
        lba: u64,
        cnt: u32,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Block write procedure (without cache)\n @param   bdev block device descriptor\n @param   buf output buffer\n @param   lba logical block address\n @return  standard error code"]
    pub fn ext4_blocks_set_direct(
        bdev: *mut ext4_blockdev,
        buf: *const ::core::ffi::c_void,
        lba: u64,
        cnt: u32,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Write to block device (by direct address).\n @param   bdev block device descriptor\n @param   off byte offset in block device\n @param   buf input buffer\n @param   len length of the write buffer\n @return  standard error code"]
    pub fn ext4_block_writebytes(
        bdev: *mut ext4_blockdev,
        off: u64,
        buf: *const ::core::ffi::c_void,
        len: u32,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Read freom block device (by direct address).\n @param   bdev block device descriptor\n @param   off byte offset in block device\n @param   buf input buffer\n @param   len length of the write buffer\n @return  standard error code"]
    pub fn ext4_block_readbytes(
        bdev: *mut ext4_blockdev,
        off: u64,
        buf: *mut ::core::ffi::c_void,
        len: u32,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Flush all dirty buffers to disk\n @param   bdev block device descriptor\n @return  standard error code"]
    pub fn ext4_block_cache_flush(bdev: *mut ext4_blockdev) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Enable/disable write back cache mode\n @param   bdev block device descriptor\n @param   on_off\n              !0 - ENABLE\n               0 - DISABLE (all delayed cache buffers will be flushed)\n @return  standard error code"]
    pub fn ext4_block_cache_write_back(bdev: *mut ext4_blockdev, on_off: u8) -> ::core::ffi::c_int;
}
pub type ext4_lblk_t = u32;
pub type ext4_fsblk_t = u64;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_sblock {
    pub inodes_count: u32,
    pub blocks_count_lo: u32,
    pub reserved_blocks_count_lo: u32,
    pub free_blocks_count_lo: u32,
    pub free_inodes_count: u32,
    pub first_data_block: u32,
    pub log_block_size: u32,
    pub log_cluster_size: u32,
    pub blocks_per_group: u32,
    pub frags_per_group: u32,
    pub inodes_per_group: u32,
    pub mount_time: u32,
    pub write_time: u32,
    pub mount_count: u16,
    pub max_mount_count: u16,
    pub magic: u16,
    pub state: u16,
    pub errors: u16,
    pub minor_rev_level: u16,
    pub last_check_time: u32,
    pub check_interval: u32,
    pub creator_os: u32,
    pub rev_level: u32,
    pub def_resuid: u16,
    pub def_resgid: u16,
    pub first_inode: u32,
    pub inode_size: u16,
    pub block_group_index: u16,
    pub features_compatible: u32,
    pub features_incompatible: u32,
    pub features_read_only: u32,
    pub uuid: [u8; 16usize],
    pub volume_name: [::core::ffi::c_char; 16usize],
    pub last_mounted: [::core::ffi::c_char; 64usize],
    pub algorithm_usage_bitmap: u32,
    pub s_prealloc_blocks: u8,
    pub s_prealloc_dir_blocks: u8,
    pub s_reserved_gdt_blocks: u16,
    pub journal_uuid: [u8; 16usize],
    pub journal_inode_number: u32,
    pub journal_dev: u32,
    pub last_orphan: u32,
    pub hash_seed: [u32; 4usize],
    pub default_hash_version: u8,
    pub journal_backup_type: u8,
    pub desc_size: u16,
    pub default_mount_opts: u32,
    pub first_meta_bg: u32,
    pub mkfs_time: u32,
    pub journal_blocks: [u32; 17usize],
    pub blocks_count_hi: u32,
    pub reserved_blocks_count_hi: u32,
    pub free_blocks_count_hi: u32,
    pub min_extra_isize: u16,
    pub want_extra_isize: u16,
    pub flags: u32,
    pub raid_stride: u16,
    pub mmp_interval: u16,
    pub mmp_block: u64,
    pub raid_stripe_width: u32,
    pub log_groups_per_flex: u8,
    pub checksum_type: u8,
    pub reserved_pad: u16,
    pub kbytes_written: u64,
    pub snapshot_inum: u32,
    pub snapshot_id: u32,
    pub snapshot_r_blocks_count: u64,
    pub snapshot_list: u32,
    pub error_count: u32,
    pub first_error_time: u32,
    pub first_error_ino: u32,
    pub first_error_block: u64,
    pub first_error_func: [u8; 32usize],
    pub first_error_line: u32,
    pub last_error_time: u32,
    pub last_error_ino: u32,
    pub last_error_line: u32,
    pub last_error_block: u64,
    pub last_error_func: [u8; 32usize],
    pub mount_opts: [u8; 64usize],
    pub usr_quota_inum: u32,
    pub grp_quota_inum: u32,
    pub overhead_clusters: u32,
    pub backup_bgs: [u32; 2usize],
    pub encrypt_algos: [u8; 4usize],
    pub encrypt_pw_salt: [u8; 16usize],
    pub lpf_ino: u32,
    pub padding: [u32; 100usize],
    pub checksum: u32,
}
#[test]
fn bindgen_test_layout_ext4_sblock() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_sblock> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_sblock>(),
        1024usize,
        concat!("Size of: ", stringify!(ext4_sblock))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_sblock>(),
        1usize,
        concat!("Alignment of ", stringify!(ext4_sblock))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inodes_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(inodes_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).blocks_count_lo) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(blocks_count_lo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved_blocks_count_lo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(reserved_blocks_count_lo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).free_blocks_count_lo) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(free_blocks_count_lo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).free_inodes_count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(free_inodes_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).first_data_block) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(first_data_block)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).log_block_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(log_block_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).log_cluster_size) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(log_cluster_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).blocks_per_group) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(blocks_per_group)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).frags_per_group) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(frags_per_group)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inodes_per_group) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(inodes_per_group)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mount_time) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(mount_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).write_time) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(write_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mount_count) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(mount_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).max_mount_count) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(max_mount_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).magic) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).errors) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(errors)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).minor_rev_level) as usize - ptr as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(minor_rev_level)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).last_check_time) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(last_check_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).check_interval) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(check_interval)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).creator_os) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(creator_os)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rev_level) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(rev_level)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).def_resuid) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(def_resuid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).def_resgid) as usize - ptr as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(def_resgid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).first_inode) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(first_inode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inode_size) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(inode_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).block_group_index) as usize - ptr as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(block_group_index)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).features_compatible) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(features_compatible)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).features_incompatible) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(features_incompatible)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).features_read_only) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(features_read_only)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).volume_name) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(volume_name)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).last_mounted) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(last_mounted)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).algorithm_usage_bitmap) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(algorithm_usage_bitmap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).s_prealloc_blocks) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(s_prealloc_blocks)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).s_prealloc_dir_blocks) as usize - ptr as usize },
        205usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(s_prealloc_dir_blocks)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).s_reserved_gdt_blocks) as usize - ptr as usize },
        206usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(s_reserved_gdt_blocks)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).journal_uuid) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(journal_uuid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).journal_inode_number) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(journal_inode_number)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).journal_dev) as usize - ptr as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(journal_dev)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).last_orphan) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(last_orphan)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hash_seed) as usize - ptr as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(hash_seed)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).default_hash_version) as usize - ptr as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(default_hash_version)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).journal_backup_type) as usize - ptr as usize },
        253usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(journal_backup_type)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).desc_size) as usize - ptr as usize },
        254usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(desc_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).default_mount_opts) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(default_mount_opts)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).first_meta_bg) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(first_meta_bg)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mkfs_time) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(mkfs_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).journal_blocks) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(journal_blocks)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).blocks_count_hi) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(blocks_count_hi)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved_blocks_count_hi) as usize - ptr as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(reserved_blocks_count_hi)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).free_blocks_count_hi) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(free_blocks_count_hi)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).min_extra_isize) as usize - ptr as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(min_extra_isize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).want_extra_isize) as usize - ptr as usize },
        350usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(want_extra_isize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).raid_stride) as usize - ptr as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(raid_stride)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mmp_interval) as usize - ptr as usize },
        358usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(mmp_interval)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mmp_block) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(mmp_block)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).raid_stripe_width) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(raid_stripe_width)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).log_groups_per_flex) as usize - ptr as usize },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(log_groups_per_flex)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).checksum_type) as usize - ptr as usize },
        373usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(checksum_type)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved_pad) as usize - ptr as usize },
        374usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(reserved_pad)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).kbytes_written) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(kbytes_written)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).snapshot_inum) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(snapshot_inum)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).snapshot_id) as usize - ptr as usize },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(snapshot_id)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).snapshot_r_blocks_count) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(snapshot_r_blocks_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).snapshot_list) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(snapshot_list)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).error_count) as usize - ptr as usize },
        404usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(error_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).first_error_time) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(first_error_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).first_error_ino) as usize - ptr as usize },
        412usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(first_error_ino)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).first_error_block) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(first_error_block)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).first_error_func) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(first_error_func)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).first_error_line) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(first_error_line)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).last_error_time) as usize - ptr as usize },
        460usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(last_error_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).last_error_ino) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(last_error_ino)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).last_error_line) as usize - ptr as usize },
        468usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(last_error_line)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).last_error_block) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(last_error_block)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).last_error_func) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(last_error_func)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mount_opts) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(mount_opts)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).usr_quota_inum) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(usr_quota_inum)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).grp_quota_inum) as usize - ptr as usize },
        580usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(grp_quota_inum)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).overhead_clusters) as usize - ptr as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(overhead_clusters)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).backup_bgs) as usize - ptr as usize },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(backup_bgs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).encrypt_algos) as usize - ptr as usize },
        596usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(encrypt_algos)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).encrypt_pw_salt) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(encrypt_pw_salt)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lpf_ino) as usize - ptr as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(lpf_ino)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).checksum) as usize - ptr as usize },
        1020usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(checksum)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_bgroup {
    pub block_bitmap_lo: u32,
    pub inode_bitmap_lo: u32,
    pub inode_table_first_block_lo: u32,
    pub free_blocks_count_lo: u16,
    pub free_inodes_count_lo: u16,
    pub used_dirs_count_lo: u16,
    pub flags: u16,
    pub exclude_bitmap_lo: u32,
    pub block_bitmap_csum_lo: u16,
    pub inode_bitmap_csum_lo: u16,
    pub itable_unused_lo: u16,
    pub checksum: u16,
    pub block_bitmap_hi: u32,
    pub inode_bitmap_hi: u32,
    pub inode_table_first_block_hi: u32,
    pub free_blocks_count_hi: u16,
    pub free_inodes_count_hi: u16,
    pub used_dirs_count_hi: u16,
    pub itable_unused_hi: u16,
    pub exclude_bitmap_hi: u32,
    pub block_bitmap_csum_hi: u16,
    pub inode_bitmap_csum_hi: u16,
    pub reserved: u32,
}
#[test]
fn bindgen_test_layout_ext4_bgroup() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_bgroup> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_bgroup>(),
        64usize,
        concat!("Size of: ", stringify!(ext4_bgroup))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_bgroup>(),
        4usize,
        concat!("Alignment of ", stringify!(ext4_bgroup))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).block_bitmap_lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(block_bitmap_lo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inode_bitmap_lo) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(inode_bitmap_lo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inode_table_first_block_lo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(inode_table_first_block_lo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).free_blocks_count_lo) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(free_blocks_count_lo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).free_inodes_count_lo) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(free_inodes_count_lo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).used_dirs_count_lo) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(used_dirs_count_lo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).exclude_bitmap_lo) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(exclude_bitmap_lo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).block_bitmap_csum_lo) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(block_bitmap_csum_lo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inode_bitmap_csum_lo) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(inode_bitmap_csum_lo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).itable_unused_lo) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(itable_unused_lo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).checksum) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(checksum)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).block_bitmap_hi) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(block_bitmap_hi)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inode_bitmap_hi) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(inode_bitmap_hi)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inode_table_first_block_hi) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(inode_table_first_block_hi)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).free_blocks_count_hi) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(free_blocks_count_hi)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).free_inodes_count_hi) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(free_inodes_count_hi)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).used_dirs_count_hi) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(used_dirs_count_hi)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).itable_unused_hi) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(itable_unused_hi)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).exclude_bitmap_hi) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(exclude_bitmap_hi)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).block_bitmap_csum_hi) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(block_bitmap_csum_hi)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inode_bitmap_csum_hi) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(inode_bitmap_csum_hi)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct ext4_inode {
    pub mode: u16,
    pub uid: u16,
    pub size_lo: u32,
    pub access_time: u32,
    pub change_inode_time: u32,
    pub modification_time: u32,
    pub deletion_time: u32,
    pub gid: u16,
    pub links_count: u16,
    pub blocks_count_lo: u32,
    pub flags: u32,
    pub unused_osd1: u32,
    pub blocks: [u32; 15usize],
    pub generation: u32,
    pub file_acl_lo: u32,
    pub size_hi: u32,
    pub obso_faddr: u32,
    pub osd2: ext4_inode__bindgen_ty_1,
    pub extra_isize: u16,
    pub checksum_hi: u16,
    pub ctime_extra: u32,
    pub mtime_extra: u32,
    pub atime_extra: u32,
    pub crtime: u32,
    pub crtime_extra: u32,
    pub version_hi: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ext4_inode__bindgen_ty_1 {
    pub linux2: ext4_inode__bindgen_ty_1__bindgen_ty_1,
    pub hurd2: ext4_inode__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_inode__bindgen_ty_1__bindgen_ty_1 {
    pub blocks_high: u16,
    pub file_acl_high: u16,
    pub uid_high: u16,
    pub gid_high: u16,
    pub checksum_lo: u16,
    pub reserved2: u16,
}
#[test]
fn bindgen_test_layout_ext4_inode__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_inode__bindgen_ty_1__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_inode__bindgen_ty_1__bindgen_ty_1>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(ext4_inode__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_inode__bindgen_ty_1__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ext4_inode__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).blocks_high) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(blocks_high)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).file_acl_high) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(file_acl_high)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).uid_high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(uid_high)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gid_high) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(gid_high)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).checksum_lo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(checksum_lo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved2)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_inode__bindgen_ty_1__bindgen_ty_2 {
    pub reserved1: u16,
    pub mode_high: u16,
    pub uid_high: u16,
    pub gid_high: u16,
    pub author: u32,
}
#[test]
fn bindgen_test_layout_ext4_inode__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_inode__bindgen_ty_1__bindgen_ty_2> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_inode__bindgen_ty_1__bindgen_ty_2>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(ext4_inode__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_inode__bindgen_ty_1__bindgen_ty_2>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ext4_inode__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mode_high) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(mode_high)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).uid_high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(uid_high)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gid_high) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(gid_high)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).author) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(author)
        )
    );
}
#[test]
fn bindgen_test_layout_ext4_inode__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_inode__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_inode__bindgen_ty_1>(),
        12usize,
        concat!("Size of: ", stringify!(ext4_inode__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_inode__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(ext4_inode__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).linux2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode__bindgen_ty_1),
            "::",
            stringify!(linux2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hurd2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode__bindgen_ty_1),
            "::",
            stringify!(hurd2)
        )
    );
}
#[test]
fn bindgen_test_layout_ext4_inode() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_inode> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_inode>(),
        156usize,
        concat!("Size of: ", stringify!(ext4_inode))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_inode>(),
        1usize,
        concat!("Alignment of ", stringify!(ext4_inode))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).uid) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(uid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).size_lo) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(size_lo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).access_time) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(access_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).change_inode_time) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(change_inode_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).modification_time) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(modification_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).deletion_time) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(deletion_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(gid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).links_count) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(links_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).blocks_count_lo) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(blocks_count_lo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).unused_osd1) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(unused_osd1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).blocks) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(blocks)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).generation) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).file_acl_lo) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(file_acl_lo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).size_hi) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(size_hi)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).obso_faddr) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(obso_faddr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).osd2) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(osd2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).extra_isize) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(extra_isize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).checksum_hi) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(checksum_hi)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ctime_extra) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(ctime_extra)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mtime_extra) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(mtime_extra)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).atime_extra) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(atime_extra)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).crtime) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(crtime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).crtime_extra) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(crtime_extra)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).version_hi) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(version_hi)
        )
    );
}
pub const EXT4_DE_UNKNOWN: _bindgen_ty_1 = 0;
pub const EXT4_DE_REG_FILE: _bindgen_ty_1 = 1;
pub const EXT4_DE_DIR: _bindgen_ty_1 = 2;
pub const EXT4_DE_CHRDEV: _bindgen_ty_1 = 3;
pub const EXT4_DE_BLKDEV: _bindgen_ty_1 = 4;
pub const EXT4_DE_FIFO: _bindgen_ty_1 = 5;
pub const EXT4_DE_SOCK: _bindgen_ty_1 = 6;
pub const EXT4_DE_SYMLINK: _bindgen_ty_1 = 7;
#[doc = "@brief   Directory entry types."]
pub type _bindgen_ty_1 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union ext4_dir_en_internal {
    pub name_length_high: u8,
    pub inode_type: u8,
}
#[test]
fn bindgen_test_layout_ext4_dir_en_internal() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_dir_en_internal> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_dir_en_internal>(),
        1usize,
        concat!("Size of: ", stringify!(ext4_dir_en_internal))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_dir_en_internal>(),
        1usize,
        concat!("Alignment of ", stringify!(ext4_dir_en_internal))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).name_length_high) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_en_internal),
            "::",
            stringify!(name_length_high)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inode_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_en_internal),
            "::",
            stringify!(inode_type)
        )
    );
}
#[doc = " Linked list directory entry structure"]
#[repr(C, packed)]
pub struct ext4_dir_en {
    pub inode: u32,
    pub entry_len: u16,
    pub name_len: u8,
    pub in_: ext4_dir_en_internal,
    pub name: __IncompleteArrayField<u8>,
}
#[test]
fn bindgen_test_layout_ext4_dir_en() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_dir_en> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_dir_en>(),
        8usize,
        concat!("Size of: ", stringify!(ext4_dir_en))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_dir_en>(),
        1usize,
        concat!("Alignment of ", stringify!(ext4_dir_en))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_en),
            "::",
            stringify!(inode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).entry_len) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_en),
            "::",
            stringify!(entry_len)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).name_len) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_en),
            "::",
            stringify!(name_len)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).in_) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_en),
            "::",
            stringify!(in_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_en),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_dir_idx_climit {
    pub limit: u16,
    pub count: u16,
}
#[test]
fn bindgen_test_layout_ext4_dir_idx_climit() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_dir_idx_climit> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_dir_idx_climit>(),
        4usize,
        concat!("Size of: ", stringify!(ext4_dir_idx_climit))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_dir_idx_climit>(),
        1usize,
        concat!("Alignment of ", stringify!(ext4_dir_idx_climit))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).limit) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_climit),
            "::",
            stringify!(limit)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_climit),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_dir_idx_dot_en {
    pub inode: u32,
    pub entry_length: u16,
    pub name_length: u8,
    pub inode_type: u8,
    pub name: [u8; 4usize],
}
#[test]
fn bindgen_test_layout_ext4_dir_idx_dot_en() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_dir_idx_dot_en> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_dir_idx_dot_en>(),
        12usize,
        concat!("Size of: ", stringify!(ext4_dir_idx_dot_en))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_dir_idx_dot_en>(),
        1usize,
        concat!("Alignment of ", stringify!(ext4_dir_idx_dot_en))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_dot_en),
            "::",
            stringify!(inode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).entry_length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_dot_en),
            "::",
            stringify!(entry_length)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).name_length) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_dot_en),
            "::",
            stringify!(name_length)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inode_type) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_dot_en),
            "::",
            stringify!(inode_type)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_dot_en),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_dir_idx_rinfo {
    pub reserved_zero: u32,
    pub hash_version: u8,
    pub info_length: u8,
    pub indirect_levels: u8,
    pub unused_flags: u8,
}
#[test]
fn bindgen_test_layout_ext4_dir_idx_rinfo() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_dir_idx_rinfo> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_dir_idx_rinfo>(),
        8usize,
        concat!("Size of: ", stringify!(ext4_dir_idx_rinfo))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_dir_idx_rinfo>(),
        1usize,
        concat!("Alignment of ", stringify!(ext4_dir_idx_rinfo))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved_zero) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_rinfo),
            "::",
            stringify!(reserved_zero)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hash_version) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_rinfo),
            "::",
            stringify!(hash_version)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).info_length) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_rinfo),
            "::",
            stringify!(info_length)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).indirect_levels) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_rinfo),
            "::",
            stringify!(indirect_levels)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).unused_flags) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_rinfo),
            "::",
            stringify!(unused_flags)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_dir_idx_entry {
    pub hash: u32,
    pub block: u32,
}
#[test]
fn bindgen_test_layout_ext4_dir_idx_entry() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_dir_idx_entry> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_dir_idx_entry>(),
        8usize,
        concat!("Size of: ", stringify!(ext4_dir_idx_entry))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_dir_idx_entry>(),
        1usize,
        concat!("Alignment of ", stringify!(ext4_dir_idx_entry))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_entry),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).block) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_entry),
            "::",
            stringify!(block)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct ext4_dir_idx_root {
    pub dots: [ext4_dir_idx_dot_en; 2usize],
    pub info: ext4_dir_idx_rinfo,
    pub en: __IncompleteArrayField<ext4_dir_idx_entry>,
}
#[test]
fn bindgen_test_layout_ext4_dir_idx_root() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_dir_idx_root> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_dir_idx_root>(),
        32usize,
        concat!("Size of: ", stringify!(ext4_dir_idx_root))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_dir_idx_root>(),
        1usize,
        concat!("Alignment of ", stringify!(ext4_dir_idx_root))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dots) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_root),
            "::",
            stringify!(dots)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_root),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).en) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_root),
            "::",
            stringify!(en)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_fake_dir_entry {
    pub inode: u32,
    pub entry_length: u16,
    pub name_length: u8,
    pub inode_type: u8,
}
#[test]
fn bindgen_test_layout_ext4_fake_dir_entry() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_fake_dir_entry> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_fake_dir_entry>(),
        8usize,
        concat!("Size of: ", stringify!(ext4_fake_dir_entry))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_fake_dir_entry>(),
        1usize,
        concat!("Alignment of ", stringify!(ext4_fake_dir_entry))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_fake_dir_entry),
            "::",
            stringify!(inode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).entry_length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_fake_dir_entry),
            "::",
            stringify!(entry_length)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).name_length) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_fake_dir_entry),
            "::",
            stringify!(name_length)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inode_type) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_fake_dir_entry),
            "::",
            stringify!(inode_type)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct ext4_dir_idx_node {
    pub fake: ext4_fake_dir_entry,
    pub entries: __IncompleteArrayField<ext4_dir_idx_entry>,
}
#[test]
fn bindgen_test_layout_ext4_dir_idx_node() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_dir_idx_node> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_dir_idx_node>(),
        8usize,
        concat!("Size of: ", stringify!(ext4_dir_idx_node))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_dir_idx_node>(),
        1usize,
        concat!("Alignment of ", stringify!(ext4_dir_idx_node))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fake) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_node),
            "::",
            stringify!(fake)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).entries) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_node),
            "::",
            stringify!(entries)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_dir_idx_tail {
    pub reserved: u32,
    pub checksum: u32,
}
#[test]
fn bindgen_test_layout_ext4_dir_idx_tail() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_dir_idx_tail> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_dir_idx_tail>(),
        8usize,
        concat!("Size of: ", stringify!(ext4_dir_idx_tail))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_dir_idx_tail>(),
        1usize,
        concat!("Alignment of ", stringify!(ext4_dir_idx_tail))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_tail),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).checksum) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_tail),
            "::",
            stringify!(checksum)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_dir_entry_tail {
    pub reserved_zero1: u32,
    pub rec_len: u16,
    pub reserved_zero2: u8,
    pub reserved_ft: u8,
    pub checksum: u32,
}
#[test]
fn bindgen_test_layout_ext4_dir_entry_tail() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_dir_entry_tail> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_dir_entry_tail>(),
        12usize,
        concat!("Size of: ", stringify!(ext4_dir_entry_tail))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_dir_entry_tail>(),
        1usize,
        concat!("Alignment of ", stringify!(ext4_dir_entry_tail))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved_zero1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_entry_tail),
            "::",
            stringify!(reserved_zero1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rec_len) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_entry_tail),
            "::",
            stringify!(rec_len)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved_zero2) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_entry_tail),
            "::",
            stringify!(reserved_zero2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved_ft) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_entry_tail),
            "::",
            stringify!(reserved_ft)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).checksum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_entry_tail),
            "::",
            stringify!(checksum)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct jbd_bhdr {
    pub magic: u32,
    pub blocktype: u32,
    pub sequence: u32,
}
#[test]
fn bindgen_test_layout_jbd_bhdr() {
    const UNINIT: ::core::mem::MaybeUninit<jbd_bhdr> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<jbd_bhdr>(),
        12usize,
        concat!("Size of: ", stringify!(jbd_bhdr))
    );
    assert_eq!(
        ::core::mem::align_of::<jbd_bhdr>(),
        1usize,
        concat!("Alignment of ", stringify!(jbd_bhdr))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).magic) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_bhdr),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).blocktype) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_bhdr),
            "::",
            stringify!(blocktype)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sequence) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_bhdr),
            "::",
            stringify!(sequence)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct jbd_commit_header {
    pub header: jbd_bhdr,
    pub chksum_type: u8,
    pub chksum_size: u8,
    pub padding: [u8; 2usize],
    pub chksum: [u32; 8usize],
    pub commit_sec: u64,
    pub commit_nsec: u32,
}
#[test]
fn bindgen_test_layout_jbd_commit_header() {
    const UNINIT: ::core::mem::MaybeUninit<jbd_commit_header> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<jbd_commit_header>(),
        60usize,
        concat!("Size of: ", stringify!(jbd_commit_header))
    );
    assert_eq!(
        ::core::mem::align_of::<jbd_commit_header>(),
        1usize,
        concat!("Alignment of ", stringify!(jbd_commit_header))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_commit_header),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).chksum_type) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_commit_header),
            "::",
            stringify!(chksum_type)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).chksum_size) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_commit_header),
            "::",
            stringify!(chksum_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_commit_header),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).chksum) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_commit_header),
            "::",
            stringify!(chksum)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).commit_sec) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_commit_header),
            "::",
            stringify!(commit_sec)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).commit_nsec) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_commit_header),
            "::",
            stringify!(commit_nsec)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct jbd_block_tag3 {
    pub blocknr: u32,
    pub flags: u32,
    pub blocknr_high: u32,
    pub checksum: u32,
}
#[test]
fn bindgen_test_layout_jbd_block_tag3() {
    const UNINIT: ::core::mem::MaybeUninit<jbd_block_tag3> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<jbd_block_tag3>(),
        16usize,
        concat!("Size of: ", stringify!(jbd_block_tag3))
    );
    assert_eq!(
        ::core::mem::align_of::<jbd_block_tag3>(),
        1usize,
        concat!("Alignment of ", stringify!(jbd_block_tag3))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).blocknr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_block_tag3),
            "::",
            stringify!(blocknr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_block_tag3),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).blocknr_high) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_block_tag3),
            "::",
            stringify!(blocknr_high)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).checksum) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_block_tag3),
            "::",
            stringify!(checksum)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct jbd_block_tag {
    pub blocknr: u32,
    pub checksum: u16,
    pub flags: u16,
    pub blocknr_high: u32,
}
#[test]
fn bindgen_test_layout_jbd_block_tag() {
    const UNINIT: ::core::mem::MaybeUninit<jbd_block_tag> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<jbd_block_tag>(),
        12usize,
        concat!("Size of: ", stringify!(jbd_block_tag))
    );
    assert_eq!(
        ::core::mem::align_of::<jbd_block_tag>(),
        1usize,
        concat!("Alignment of ", stringify!(jbd_block_tag))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).blocknr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_block_tag),
            "::",
            stringify!(blocknr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).checksum) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_block_tag),
            "::",
            stringify!(checksum)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_block_tag),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).blocknr_high) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_block_tag),
            "::",
            stringify!(blocknr_high)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct jbd_block_tail {
    pub checksum: u32,
}
#[test]
fn bindgen_test_layout_jbd_block_tail() {
    const UNINIT: ::core::mem::MaybeUninit<jbd_block_tail> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<jbd_block_tail>(),
        4usize,
        concat!("Size of: ", stringify!(jbd_block_tail))
    );
    assert_eq!(
        ::core::mem::align_of::<jbd_block_tail>(),
        1usize,
        concat!("Alignment of ", stringify!(jbd_block_tail))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).checksum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_block_tail),
            "::",
            stringify!(checksum)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct jbd_revoke_header {
    pub header: jbd_bhdr,
    pub count: u32,
}
#[test]
fn bindgen_test_layout_jbd_revoke_header() {
    const UNINIT: ::core::mem::MaybeUninit<jbd_revoke_header> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<jbd_revoke_header>(),
        16usize,
        concat!("Size of: ", stringify!(jbd_revoke_header))
    );
    assert_eq!(
        ::core::mem::align_of::<jbd_revoke_header>(),
        1usize,
        concat!("Alignment of ", stringify!(jbd_revoke_header))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_revoke_header),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_revoke_header),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct jbd_revoke_tail {
    pub checksum: u32,
}
#[test]
fn bindgen_test_layout_jbd_revoke_tail() {
    const UNINIT: ::core::mem::MaybeUninit<jbd_revoke_tail> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<jbd_revoke_tail>(),
        4usize,
        concat!("Size of: ", stringify!(jbd_revoke_tail))
    );
    assert_eq!(
        ::core::mem::align_of::<jbd_revoke_tail>(),
        1usize,
        concat!("Alignment of ", stringify!(jbd_revoke_tail))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).checksum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_revoke_tail),
            "::",
            stringify!(checksum)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct jbd_sb {
    pub header: jbd_bhdr,
    pub blocksize: u32,
    pub maxlen: u32,
    pub first: u32,
    pub sequence: u32,
    pub start: u32,
    pub error_val: i32,
    pub feature_compat: u32,
    pub feature_incompat: u32,
    pub feature_ro_compat: u32,
    pub uuid: [u8; 16usize],
    pub nr_users: u32,
    pub dynsuper: u32,
    pub max_transaction: u32,
    pub max_trandata: u32,
    pub checksum_type: u8,
    pub padding2: [u8; 3usize],
    pub padding: [u32; 42usize],
    pub checksum: u32,
    pub users: [u8; 768usize],
}
#[test]
fn bindgen_test_layout_jbd_sb() {
    const UNINIT: ::core::mem::MaybeUninit<jbd_sb> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<jbd_sb>(),
        1024usize,
        concat!("Size of: ", stringify!(jbd_sb))
    );
    assert_eq!(
        ::core::mem::align_of::<jbd_sb>(),
        1usize,
        concat!("Alignment of ", stringify!(jbd_sb))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).blocksize) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(blocksize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxlen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(maxlen)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).first) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(first)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sequence) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(sequence)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).error_val) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(error_val)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).feature_compat) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(feature_compat)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).feature_incompat) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(feature_incompat)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).feature_ro_compat) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(feature_ro_compat)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nr_users) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(nr_users)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dynsuper) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(dynsuper)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).max_transaction) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(max_transaction)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).max_trandata) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(max_trandata)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).checksum_type) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(checksum_type)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).padding2) as usize - ptr as usize },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(padding2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).checksum) as usize - ptr as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(checksum)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).users) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(users)
        )
    );
}
extern "C" {
    pub fn __errno_location() -> *mut ::core::ffi::c_int;
}
pub type gid_t = __gid_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type useconds_t = __useconds_t;
pub type pid_t = __pid_t;
pub type socklen_t = __socklen_t;
extern "C" {
    pub fn access(
        __name: *const ::core::ffi::c_char,
        __type: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn faccessat(
        __fd: ::core::ffi::c_int,
        __file: *const ::core::ffi::c_char,
        __type: ::core::ffi::c_int,
        __flag: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn lseek(
        __fd: ::core::ffi::c_int,
        __offset: __off_t,
        __whence: ::core::ffi::c_int,
    ) -> __off_t;
}
extern "C" {
    pub fn close(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn closefrom(__lowfd: ::core::ffi::c_int);
}
extern "C" {
    pub fn read(
        __fd: ::core::ffi::c_int,
        __buf: *mut ::core::ffi::c_void,
        __nbytes: usize,
    ) -> isize;
}
extern "C" {
    pub fn write(__fd: ::core::ffi::c_int, __buf: *const ::core::ffi::c_void, __n: usize) -> isize;
}
extern "C" {
    pub fn pread(
        __fd: ::core::ffi::c_int,
        __buf: *mut ::core::ffi::c_void,
        __nbytes: usize,
        __offset: __off_t,
    ) -> isize;
}
extern "C" {
    pub fn pwrite(
        __fd: ::core::ffi::c_int,
        __buf: *const ::core::ffi::c_void,
        __n: usize,
        __offset: __off_t,
    ) -> isize;
}
extern "C" {
    pub fn pipe(__pipedes: *mut ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn alarm(__seconds: ::core::ffi::c_uint) -> ::core::ffi::c_uint;
}
extern "C" {
    pub fn sleep(__seconds: ::core::ffi::c_uint) -> ::core::ffi::c_uint;
}
extern "C" {
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t) -> __useconds_t;
}
extern "C" {
    pub fn usleep(__useconds: __useconds_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pause() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn chown(
        __file: *const ::core::ffi::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fchown(
        __fd: ::core::ffi::c_int,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn lchown(
        __file: *const ::core::ffi::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fchownat(
        __fd: ::core::ffi::c_int,
        __file: *const ::core::ffi::c_char,
        __owner: __uid_t,
        __group: __gid_t,
        __flag: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn chdir(__path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fchdir(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getcwd(__buf: *mut ::core::ffi::c_char, __size: usize) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn getwd(__buf: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn dup(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn dup2(__fd: ::core::ffi::c_int, __fd2: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub static mut __environ: *mut *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn execve(
        __path: *const ::core::ffi::c_char,
        __argv: *const *mut ::core::ffi::c_char,
        __envp: *const *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fexecve(
        __fd: ::core::ffi::c_int,
        __argv: *const *mut ::core::ffi::c_char,
        __envp: *const *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::core::ffi::c_char,
        __argv: *const *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::core::ffi::c_char,
        __arg: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::core::ffi::c_char,
        __arg: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::core::ffi::c_char,
        __argv: *const *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::core::ffi::c_char,
        __arg: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn nice(__inc: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _exit(__status: ::core::ffi::c_int) -> !;
}
pub const _PC_LINK_MAX: _bindgen_ty_2 = 0;
pub const _PC_MAX_CANON: _bindgen_ty_2 = 1;
pub const _PC_MAX_INPUT: _bindgen_ty_2 = 2;
pub const _PC_NAME_MAX: _bindgen_ty_2 = 3;
pub const _PC_PATH_MAX: _bindgen_ty_2 = 4;
pub const _PC_PIPE_BUF: _bindgen_ty_2 = 5;
pub const _PC_CHOWN_RESTRICTED: _bindgen_ty_2 = 6;
pub const _PC_NO_TRUNC: _bindgen_ty_2 = 7;
pub const _PC_VDISABLE: _bindgen_ty_2 = 8;
pub const _PC_SYNC_IO: _bindgen_ty_2 = 9;
pub const _PC_ASYNC_IO: _bindgen_ty_2 = 10;
pub const _PC_PRIO_IO: _bindgen_ty_2 = 11;
pub const _PC_SOCK_MAXBUF: _bindgen_ty_2 = 12;
pub const _PC_FILESIZEBITS: _bindgen_ty_2 = 13;
pub const _PC_REC_INCR_XFER_SIZE: _bindgen_ty_2 = 14;
pub const _PC_REC_MAX_XFER_SIZE: _bindgen_ty_2 = 15;
pub const _PC_REC_MIN_XFER_SIZE: _bindgen_ty_2 = 16;
pub const _PC_REC_XFER_ALIGN: _bindgen_ty_2 = 17;
pub const _PC_ALLOC_SIZE_MIN: _bindgen_ty_2 = 18;
pub const _PC_SYMLINK_MAX: _bindgen_ty_2 = 19;
pub const _PC_2_SYMLINKS: _bindgen_ty_2 = 20;
pub type _bindgen_ty_2 = ::core::ffi::c_uint;
pub const _SC_ARG_MAX: _bindgen_ty_3 = 0;
pub const _SC_CHILD_MAX: _bindgen_ty_3 = 1;
pub const _SC_CLK_TCK: _bindgen_ty_3 = 2;
pub const _SC_NGROUPS_MAX: _bindgen_ty_3 = 3;
pub const _SC_OPEN_MAX: _bindgen_ty_3 = 4;
pub const _SC_STREAM_MAX: _bindgen_ty_3 = 5;
pub const _SC_TZNAME_MAX: _bindgen_ty_3 = 6;
pub const _SC_JOB_CONTROL: _bindgen_ty_3 = 7;
pub const _SC_SAVED_IDS: _bindgen_ty_3 = 8;
pub const _SC_REALTIME_SIGNALS: _bindgen_ty_3 = 9;
pub const _SC_PRIORITY_SCHEDULING: _bindgen_ty_3 = 10;
pub const _SC_TIMERS: _bindgen_ty_3 = 11;
pub const _SC_ASYNCHRONOUS_IO: _bindgen_ty_3 = 12;
pub const _SC_PRIORITIZED_IO: _bindgen_ty_3 = 13;
pub const _SC_SYNCHRONIZED_IO: _bindgen_ty_3 = 14;
pub const _SC_FSYNC: _bindgen_ty_3 = 15;
pub const _SC_MAPPED_FILES: _bindgen_ty_3 = 16;
pub const _SC_MEMLOCK: _bindgen_ty_3 = 17;
pub const _SC_MEMLOCK_RANGE: _bindgen_ty_3 = 18;
pub const _SC_MEMORY_PROTECTION: _bindgen_ty_3 = 19;
pub const _SC_MESSAGE_PASSING: _bindgen_ty_3 = 20;
pub const _SC_SEMAPHORES: _bindgen_ty_3 = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: _bindgen_ty_3 = 22;
pub const _SC_AIO_LISTIO_MAX: _bindgen_ty_3 = 23;
pub const _SC_AIO_MAX: _bindgen_ty_3 = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: _bindgen_ty_3 = 25;
pub const _SC_DELAYTIMER_MAX: _bindgen_ty_3 = 26;
pub const _SC_MQ_OPEN_MAX: _bindgen_ty_3 = 27;
pub const _SC_MQ_PRIO_MAX: _bindgen_ty_3 = 28;
pub const _SC_VERSION: _bindgen_ty_3 = 29;
pub const _SC_PAGESIZE: _bindgen_ty_3 = 30;
pub const _SC_RTSIG_MAX: _bindgen_ty_3 = 31;
pub const _SC_SEM_NSEMS_MAX: _bindgen_ty_3 = 32;
pub const _SC_SEM_VALUE_MAX: _bindgen_ty_3 = 33;
pub const _SC_SIGQUEUE_MAX: _bindgen_ty_3 = 34;
pub const _SC_TIMER_MAX: _bindgen_ty_3 = 35;
pub const _SC_BC_BASE_MAX: _bindgen_ty_3 = 36;
pub const _SC_BC_DIM_MAX: _bindgen_ty_3 = 37;
pub const _SC_BC_SCALE_MAX: _bindgen_ty_3 = 38;
pub const _SC_BC_STRING_MAX: _bindgen_ty_3 = 39;
pub const _SC_COLL_WEIGHTS_MAX: _bindgen_ty_3 = 40;
pub const _SC_EQUIV_CLASS_MAX: _bindgen_ty_3 = 41;
pub const _SC_EXPR_NEST_MAX: _bindgen_ty_3 = 42;
pub const _SC_LINE_MAX: _bindgen_ty_3 = 43;
pub const _SC_RE_DUP_MAX: _bindgen_ty_3 = 44;
pub const _SC_CHARCLASS_NAME_MAX: _bindgen_ty_3 = 45;
pub const _SC_2_VERSION: _bindgen_ty_3 = 46;
pub const _SC_2_C_BIND: _bindgen_ty_3 = 47;
pub const _SC_2_C_DEV: _bindgen_ty_3 = 48;
pub const _SC_2_FORT_DEV: _bindgen_ty_3 = 49;
pub const _SC_2_FORT_RUN: _bindgen_ty_3 = 50;
pub const _SC_2_SW_DEV: _bindgen_ty_3 = 51;
pub const _SC_2_LOCALEDEF: _bindgen_ty_3 = 52;
pub const _SC_PII: _bindgen_ty_3 = 53;
pub const _SC_PII_XTI: _bindgen_ty_3 = 54;
pub const _SC_PII_SOCKET: _bindgen_ty_3 = 55;
pub const _SC_PII_INTERNET: _bindgen_ty_3 = 56;
pub const _SC_PII_OSI: _bindgen_ty_3 = 57;
pub const _SC_POLL: _bindgen_ty_3 = 58;
pub const _SC_SELECT: _bindgen_ty_3 = 59;
pub const _SC_UIO_MAXIOV: _bindgen_ty_3 = 60;
pub const _SC_IOV_MAX: _bindgen_ty_3 = 60;
pub const _SC_PII_INTERNET_STREAM: _bindgen_ty_3 = 61;
pub const _SC_PII_INTERNET_DGRAM: _bindgen_ty_3 = 62;
pub const _SC_PII_OSI_COTS: _bindgen_ty_3 = 63;
pub const _SC_PII_OSI_CLTS: _bindgen_ty_3 = 64;
pub const _SC_PII_OSI_M: _bindgen_ty_3 = 65;
pub const _SC_T_IOV_MAX: _bindgen_ty_3 = 66;
pub const _SC_THREADS: _bindgen_ty_3 = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: _bindgen_ty_3 = 68;
pub const _SC_GETGR_R_SIZE_MAX: _bindgen_ty_3 = 69;
pub const _SC_GETPW_R_SIZE_MAX: _bindgen_ty_3 = 70;
pub const _SC_LOGIN_NAME_MAX: _bindgen_ty_3 = 71;
pub const _SC_TTY_NAME_MAX: _bindgen_ty_3 = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: _bindgen_ty_3 = 73;
pub const _SC_THREAD_KEYS_MAX: _bindgen_ty_3 = 74;
pub const _SC_THREAD_STACK_MIN: _bindgen_ty_3 = 75;
pub const _SC_THREAD_THREADS_MAX: _bindgen_ty_3 = 76;
pub const _SC_THREAD_ATTR_STACKADDR: _bindgen_ty_3 = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: _bindgen_ty_3 = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: _bindgen_ty_3 = 79;
pub const _SC_THREAD_PRIO_INHERIT: _bindgen_ty_3 = 80;
pub const _SC_THREAD_PRIO_PROTECT: _bindgen_ty_3 = 81;
pub const _SC_THREAD_PROCESS_SHARED: _bindgen_ty_3 = 82;
pub const _SC_NPROCESSORS_CONF: _bindgen_ty_3 = 83;
pub const _SC_NPROCESSORS_ONLN: _bindgen_ty_3 = 84;
pub const _SC_PHYS_PAGES: _bindgen_ty_3 = 85;
pub const _SC_AVPHYS_PAGES: _bindgen_ty_3 = 86;
pub const _SC_ATEXIT_MAX: _bindgen_ty_3 = 87;
pub const _SC_PASS_MAX: _bindgen_ty_3 = 88;
pub const _SC_XOPEN_VERSION: _bindgen_ty_3 = 89;
pub const _SC_XOPEN_XCU_VERSION: _bindgen_ty_3 = 90;
pub const _SC_XOPEN_UNIX: _bindgen_ty_3 = 91;
pub const _SC_XOPEN_CRYPT: _bindgen_ty_3 = 92;
pub const _SC_XOPEN_ENH_I18N: _bindgen_ty_3 = 93;
pub const _SC_XOPEN_SHM: _bindgen_ty_3 = 94;
pub const _SC_2_CHAR_TERM: _bindgen_ty_3 = 95;
pub const _SC_2_C_VERSION: _bindgen_ty_3 = 96;
pub const _SC_2_UPE: _bindgen_ty_3 = 97;
pub const _SC_XOPEN_XPG2: _bindgen_ty_3 = 98;
pub const _SC_XOPEN_XPG3: _bindgen_ty_3 = 99;
pub const _SC_XOPEN_XPG4: _bindgen_ty_3 = 100;
pub const _SC_CHAR_BIT: _bindgen_ty_3 = 101;
pub const _SC_CHAR_MAX: _bindgen_ty_3 = 102;
pub const _SC_CHAR_MIN: _bindgen_ty_3 = 103;
pub const _SC_INT_MAX: _bindgen_ty_3 = 104;
pub const _SC_INT_MIN: _bindgen_ty_3 = 105;
pub const _SC_LONG_BIT: _bindgen_ty_3 = 106;
pub const _SC_WORD_BIT: _bindgen_ty_3 = 107;
pub const _SC_MB_LEN_MAX: _bindgen_ty_3 = 108;
pub const _SC_NZERO: _bindgen_ty_3 = 109;
pub const _SC_SSIZE_MAX: _bindgen_ty_3 = 110;
pub const _SC_SCHAR_MAX: _bindgen_ty_3 = 111;
pub const _SC_SCHAR_MIN: _bindgen_ty_3 = 112;
pub const _SC_SHRT_MAX: _bindgen_ty_3 = 113;
pub const _SC_SHRT_MIN: _bindgen_ty_3 = 114;
pub const _SC_UCHAR_MAX: _bindgen_ty_3 = 115;
pub const _SC_UINT_MAX: _bindgen_ty_3 = 116;
pub const _SC_ULONG_MAX: _bindgen_ty_3 = 117;
pub const _SC_USHRT_MAX: _bindgen_ty_3 = 118;
pub const _SC_NL_ARGMAX: _bindgen_ty_3 = 119;
pub const _SC_NL_LANGMAX: _bindgen_ty_3 = 120;
pub const _SC_NL_MSGMAX: _bindgen_ty_3 = 121;
pub const _SC_NL_NMAX: _bindgen_ty_3 = 122;
pub const _SC_NL_SETMAX: _bindgen_ty_3 = 123;
pub const _SC_NL_TEXTMAX: _bindgen_ty_3 = 124;
pub const _SC_XBS5_ILP32_OFF32: _bindgen_ty_3 = 125;
pub const _SC_XBS5_ILP32_OFFBIG: _bindgen_ty_3 = 126;
pub const _SC_XBS5_LP64_OFF64: _bindgen_ty_3 = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: _bindgen_ty_3 = 128;
pub const _SC_XOPEN_LEGACY: _bindgen_ty_3 = 129;
pub const _SC_XOPEN_REALTIME: _bindgen_ty_3 = 130;
pub const _SC_XOPEN_REALTIME_THREADS: _bindgen_ty_3 = 131;
pub const _SC_ADVISORY_INFO: _bindgen_ty_3 = 132;
pub const _SC_BARRIERS: _bindgen_ty_3 = 133;
pub const _SC_BASE: _bindgen_ty_3 = 134;
pub const _SC_C_LANG_SUPPORT: _bindgen_ty_3 = 135;
pub const _SC_C_LANG_SUPPORT_R: _bindgen_ty_3 = 136;
pub const _SC_CLOCK_SELECTION: _bindgen_ty_3 = 137;
pub const _SC_CPUTIME: _bindgen_ty_3 = 138;
pub const _SC_THREAD_CPUTIME: _bindgen_ty_3 = 139;
pub const _SC_DEVICE_IO: _bindgen_ty_3 = 140;
pub const _SC_DEVICE_SPECIFIC: _bindgen_ty_3 = 141;
pub const _SC_DEVICE_SPECIFIC_R: _bindgen_ty_3 = 142;
pub const _SC_FD_MGMT: _bindgen_ty_3 = 143;
pub const _SC_FIFO: _bindgen_ty_3 = 144;
pub const _SC_PIPE: _bindgen_ty_3 = 145;
pub const _SC_FILE_ATTRIBUTES: _bindgen_ty_3 = 146;
pub const _SC_FILE_LOCKING: _bindgen_ty_3 = 147;
pub const _SC_FILE_SYSTEM: _bindgen_ty_3 = 148;
pub const _SC_MONOTONIC_CLOCK: _bindgen_ty_3 = 149;
pub const _SC_MULTI_PROCESS: _bindgen_ty_3 = 150;
pub const _SC_SINGLE_PROCESS: _bindgen_ty_3 = 151;
pub const _SC_NETWORKING: _bindgen_ty_3 = 152;
pub const _SC_READER_WRITER_LOCKS: _bindgen_ty_3 = 153;
pub const _SC_SPIN_LOCKS: _bindgen_ty_3 = 154;
pub const _SC_REGEXP: _bindgen_ty_3 = 155;
pub const _SC_REGEX_VERSION: _bindgen_ty_3 = 156;
pub const _SC_SHELL: _bindgen_ty_3 = 157;
pub const _SC_SIGNALS: _bindgen_ty_3 = 158;
pub const _SC_SPAWN: _bindgen_ty_3 = 159;
pub const _SC_SPORADIC_SERVER: _bindgen_ty_3 = 160;
pub const _SC_THREAD_SPORADIC_SERVER: _bindgen_ty_3 = 161;
pub const _SC_SYSTEM_DATABASE: _bindgen_ty_3 = 162;
pub const _SC_SYSTEM_DATABASE_R: _bindgen_ty_3 = 163;
pub const _SC_TIMEOUTS: _bindgen_ty_3 = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: _bindgen_ty_3 = 165;
pub const _SC_USER_GROUPS: _bindgen_ty_3 = 166;
pub const _SC_USER_GROUPS_R: _bindgen_ty_3 = 167;
pub const _SC_2_PBS: _bindgen_ty_3 = 168;
pub const _SC_2_PBS_ACCOUNTING: _bindgen_ty_3 = 169;
pub const _SC_2_PBS_LOCATE: _bindgen_ty_3 = 170;
pub const _SC_2_PBS_MESSAGE: _bindgen_ty_3 = 171;
pub const _SC_2_PBS_TRACK: _bindgen_ty_3 = 172;
pub const _SC_SYMLOOP_MAX: _bindgen_ty_3 = 173;
pub const _SC_STREAMS: _bindgen_ty_3 = 174;
pub const _SC_2_PBS_CHECKPOINT: _bindgen_ty_3 = 175;
pub const _SC_V6_ILP32_OFF32: _bindgen_ty_3 = 176;
pub const _SC_V6_ILP32_OFFBIG: _bindgen_ty_3 = 177;
pub const _SC_V6_LP64_OFF64: _bindgen_ty_3 = 178;
pub const _SC_V6_LPBIG_OFFBIG: _bindgen_ty_3 = 179;
pub const _SC_HOST_NAME_MAX: _bindgen_ty_3 = 180;
pub const _SC_TRACE: _bindgen_ty_3 = 181;
pub const _SC_TRACE_EVENT_FILTER: _bindgen_ty_3 = 182;
pub const _SC_TRACE_INHERIT: _bindgen_ty_3 = 183;
pub const _SC_TRACE_LOG: _bindgen_ty_3 = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: _bindgen_ty_3 = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: _bindgen_ty_3 = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: _bindgen_ty_3 = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: _bindgen_ty_3 = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: _bindgen_ty_3 = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: _bindgen_ty_3 = 190;
pub const _SC_LEVEL2_CACHE_SIZE: _bindgen_ty_3 = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: _bindgen_ty_3 = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: _bindgen_ty_3 = 193;
pub const _SC_LEVEL3_CACHE_SIZE: _bindgen_ty_3 = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: _bindgen_ty_3 = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: _bindgen_ty_3 = 196;
pub const _SC_LEVEL4_CACHE_SIZE: _bindgen_ty_3 = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: _bindgen_ty_3 = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: _bindgen_ty_3 = 199;
pub const _SC_IPV6: _bindgen_ty_3 = 235;
pub const _SC_RAW_SOCKETS: _bindgen_ty_3 = 236;
pub const _SC_V7_ILP32_OFF32: _bindgen_ty_3 = 237;
pub const _SC_V7_ILP32_OFFBIG: _bindgen_ty_3 = 238;
pub const _SC_V7_LP64_OFF64: _bindgen_ty_3 = 239;
pub const _SC_V7_LPBIG_OFFBIG: _bindgen_ty_3 = 240;
pub const _SC_SS_REPL_MAX: _bindgen_ty_3 = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: _bindgen_ty_3 = 242;
pub const _SC_TRACE_NAME_MAX: _bindgen_ty_3 = 243;
pub const _SC_TRACE_SYS_MAX: _bindgen_ty_3 = 244;
pub const _SC_TRACE_USER_EVENT_MAX: _bindgen_ty_3 = 245;
pub const _SC_XOPEN_STREAMS: _bindgen_ty_3 = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: _bindgen_ty_3 = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: _bindgen_ty_3 = 248;
pub const _SC_MINSIGSTKSZ: _bindgen_ty_3 = 249;
pub const _SC_SIGSTKSZ: _bindgen_ty_3 = 250;
pub type _bindgen_ty_3 = ::core::ffi::c_uint;
pub const _CS_PATH: _bindgen_ty_4 = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: _bindgen_ty_4 = 1;
pub const _CS_GNU_LIBC_VERSION: _bindgen_ty_4 = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: _bindgen_ty_4 = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: _bindgen_ty_4 = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: _bindgen_ty_4 = 5;
pub const _CS_LFS_CFLAGS: _bindgen_ty_4 = 1000;
pub const _CS_LFS_LDFLAGS: _bindgen_ty_4 = 1001;
pub const _CS_LFS_LIBS: _bindgen_ty_4 = 1002;
pub const _CS_LFS_LINTFLAGS: _bindgen_ty_4 = 1003;
pub const _CS_LFS64_CFLAGS: _bindgen_ty_4 = 1004;
pub const _CS_LFS64_LDFLAGS: _bindgen_ty_4 = 1005;
pub const _CS_LFS64_LIBS: _bindgen_ty_4 = 1006;
pub const _CS_LFS64_LINTFLAGS: _bindgen_ty_4 = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: _bindgen_ty_4 = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: _bindgen_ty_4 = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: _bindgen_ty_4 = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: _bindgen_ty_4 = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: _bindgen_ty_4 = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_4 = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: _bindgen_ty_4 = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_4 = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: _bindgen_ty_4 = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: _bindgen_ty_4 = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: _bindgen_ty_4 = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: _bindgen_ty_4 = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_4 = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_4 = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: _bindgen_ty_4 = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_4 = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: _bindgen_ty_4 = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: _bindgen_ty_4 = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: _bindgen_ty_4 = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: _bindgen_ty_4 = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: _bindgen_ty_4 = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_4 = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: _bindgen_ty_4 = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_4 = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: _bindgen_ty_4 = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: _bindgen_ty_4 = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: _bindgen_ty_4 = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: _bindgen_ty_4 = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_4 = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_4 = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: _bindgen_ty_4 = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_4 = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: _bindgen_ty_4 = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: _bindgen_ty_4 = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: _bindgen_ty_4 = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: _bindgen_ty_4 = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: _bindgen_ty_4 = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_4 = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: _bindgen_ty_4 = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_4 = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: _bindgen_ty_4 = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: _bindgen_ty_4 = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: _bindgen_ty_4 = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: _bindgen_ty_4 = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_4 = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_4 = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: _bindgen_ty_4 = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_4 = 1147;
pub const _CS_V6_ENV: _bindgen_ty_4 = 1148;
pub const _CS_V7_ENV: _bindgen_ty_4 = 1149;
pub type _bindgen_ty_4 = ::core::ffi::c_uint;
extern "C" {
    pub fn pathconf(
        __path: *const ::core::ffi::c_char,
        __name: ::core::ffi::c_int,
    ) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn fpathconf(__fd: ::core::ffi::c_int, __name: ::core::ffi::c_int) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn sysconf(__name: ::core::ffi::c_int) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn confstr(
        __name: ::core::ffi::c_int,
        __buf: *mut ::core::ffi::c_char,
        __len: usize,
    ) -> usize;
}
extern "C" {
    pub fn getpid() -> __pid_t;
}
extern "C" {
    pub fn getppid() -> __pid_t;
}
extern "C" {
    pub fn getpgrp() -> __pid_t;
}
extern "C" {
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setpgrp() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setsid() -> __pid_t;
}
extern "C" {
    pub fn getsid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getuid() -> __uid_t;
}
extern "C" {
    pub fn geteuid() -> __uid_t;
}
extern "C" {
    pub fn getgid() -> __gid_t;
}
extern "C" {
    pub fn getegid() -> __gid_t;
}
extern "C" {
    pub fn getgroups(__size: ::core::ffi::c_int, __list: *mut __gid_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setuid(__uid: __uid_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn seteuid(__uid: __uid_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setgid(__gid: __gid_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setegid(__gid: __gid_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fork() -> __pid_t;
}
extern "C" {
    pub fn vfork() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ttyname(__fd: ::core::ffi::c_int) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn ttyname_r(
        __fd: ::core::ffi::c_int,
        __buf: *mut ::core::ffi::c_char,
        __buflen: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn isatty(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn link(
        __from: *const ::core::ffi::c_char,
        __to: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn linkat(
        __fromfd: ::core::ffi::c_int,
        __from: *const ::core::ffi::c_char,
        __tofd: ::core::ffi::c_int,
        __to: *const ::core::ffi::c_char,
        __flags: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn symlink(
        __from: *const ::core::ffi::c_char,
        __to: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn readlink(
        __path: *const ::core::ffi::c_char,
        __buf: *mut ::core::ffi::c_char,
        __len: usize,
    ) -> isize;
}
extern "C" {
    pub fn symlinkat(
        __from: *const ::core::ffi::c_char,
        __tofd: ::core::ffi::c_int,
        __to: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn readlinkat(
        __fd: ::core::ffi::c_int,
        __path: *const ::core::ffi::c_char,
        __buf: *mut ::core::ffi::c_char,
        __len: usize,
    ) -> isize;
}
extern "C" {
    pub fn unlink(__name: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn unlinkat(
        __fd: ::core::ffi::c_int,
        __name: *const ::core::ffi::c_char,
        __flag: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn rmdir(__path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn tcgetpgrp(__fd: ::core::ffi::c_int) -> __pid_t;
}
extern "C" {
    pub fn tcsetpgrp(__fd: ::core::ffi::c_int, __pgrp_id: __pid_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn getlogin_r(__name: *mut ::core::ffi::c_char, __name_len: usize) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setlogin(__name: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::core::ffi::c_char;
}
extern "C" {
    pub static mut optind: ::core::ffi::c_int;
}
extern "C" {
    pub static mut opterr: ::core::ffi::c_int;
}
extern "C" {
    pub static mut optopt: ::core::ffi::c_int;
}
extern "C" {
    pub fn getopt(
        ___argc: ::core::ffi::c_int,
        ___argv: *const *mut ::core::ffi::c_char,
        __shortopts: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gethostname(__name: *mut ::core::ffi::c_char, __len: usize) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sethostname(__name: *const ::core::ffi::c_char, __len: usize) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sethostid(__id: ::core::ffi::c_long) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getdomainname(__name: *mut ::core::ffi::c_char, __len: usize) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setdomainname(__name: *const ::core::ffi::c_char, __len: usize) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn vhangup() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn revoke(__file: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn profil(
        __sample_buffer: *mut ::core::ffi::c_ushort,
        __size: usize,
        __offset: usize,
        __scale: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn acct(__name: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn daemon(
        __nochdir: ::core::ffi::c_int,
        __noclose: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn chroot(__path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getpass(__prompt: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn fsync(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gethostid() -> ::core::ffi::c_long;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn getpagesize() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getdtablesize() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn truncate(__file: *const ::core::ffi::c_char, __length: __off_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ftruncate(__fd: ::core::ffi::c_int, __length: __off_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn brk(__addr: *mut ::core::ffi::c_void) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sbrk(__delta: isize) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn syscall(__sysno: ::core::ffi::c_long, ...) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn lockf(
        __fd: ::core::ffi::c_int,
        __cmd: ::core::ffi::c_int,
        __len: __off_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fdatasync(__fildes: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn crypt(
        __key: *const ::core::ffi::c_char,
        __salt: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn getentropy(__buffer: *mut ::core::ffi::c_void, __length: usize) -> ::core::ffi::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flock {
    pub l_type: ::core::ffi::c_short,
    pub l_whence: ::core::ffi::c_short,
    pub l_start: __off_t,
    pub l_len: __off_t,
    pub l_pid: __pid_t,
}
#[test]
fn bindgen_test_layout_flock() {
    const UNINIT: ::core::mem::MaybeUninit<flock> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<flock>(),
        32usize,
        concat!("Size of: ", stringify!(flock))
    );
    assert_eq!(
        ::core::mem::align_of::<flock>(),
        8usize,
        concat!("Alignment of ", stringify!(flock))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_type)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_whence) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_whence)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_start)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_len)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_pid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_pid)
        )
    );
}
pub type mode_t = __mode_t;
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::core::mem::MaybeUninit<timespec> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::core::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::core::ffi::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
#[test]
fn bindgen_test_layout_stat() {
    const UNINIT: ::core::mem::MaybeUninit<stat> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<stat>(),
        144usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::core::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_dev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_ino) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_nlink) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_mode) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_uid) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_gid) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__pad0) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_rdev) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_size) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_blksize) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_blocks) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_atim) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atim)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_mtim) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtim)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_ctim) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctim)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__glibc_reserved) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__glibc_reserved)
        )
    );
}
extern "C" {
    pub fn fcntl(__fd: ::core::ffi::c_int, __cmd: ::core::ffi::c_int, ...) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn open(
        __file: *const ::core::ffi::c_char,
        __oflag: ::core::ffi::c_int,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn openat(
        __fd: ::core::ffi::c_int,
        __file: *const ::core::ffi::c_char,
        __oflag: ::core::ffi::c_int,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn creat(__file: *const ::core::ffi::c_char, __mode: mode_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn posix_fadvise(
        __fd: ::core::ffi::c_int,
        __offset: off_t,
        __len: off_t,
        __advise: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn posix_fallocate(
        __fd: ::core::ffi::c_int,
        __offset: off_t,
        __len: off_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn __assert_fail(
        __assertion: *const ::core::ffi::c_char,
        __file: *const ::core::ffi::c_char,
        __line: ::core::ffi::c_uint,
        __function: *const ::core::ffi::c_char,
    ) -> !;
}
extern "C" {
    pub fn __assert_perror_fail(
        __errnum: ::core::ffi::c_int,
        __file: *const ::core::ffi::c_char,
        __line: ::core::ffi::c_uint,
        __function: *const ::core::ffi::c_char,
    ) -> !;
}
extern "C" {
    pub fn __assert(
        __assertion: *const ::core::ffi::c_char,
        __file: *const ::core::ffi::c_char,
        __line: ::core::ffi::c_int,
    ) -> !;
}
pub type __gwchar_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::core::ffi::c_long,
    pub rem: ::core::ffi::c_long,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    const UNINIT: ::core::mem::MaybeUninit<imaxdiv_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::core::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::core::ffi::c_char,
        __endptr: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::core::ffi::c_char,
        __endptr: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::core::ffi::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::core::ffi::c_int,
    ) -> uintmax_t;
}
extern "C" {
    #[doc = "@brief   Global mask debug set.\n @param   m new debug mask."]
    pub fn ext4_dmask_set(m: u32);
}
extern "C" {
    #[doc = "@brief   Global mask debug clear.\n @param   m new debug mask."]
    pub fn ext4_dmask_clr(m: u32);
}
extern "C" {
    #[doc = "@brief   Global debug mask get.\n @return  debug mask"]
    pub fn ext4_dmask_get() -> u32;
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::core::ffi::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::core::ffi::c_uint,
    pub __wchb: [::core::ffi::c_char; 4usize],
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<__mbstate_t__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__wch) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__wchb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::core::mem::MaybeUninit<__mbstate_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    const UNINIT: ::core::mem::MaybeUninit<_G_fpos_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    const UNINIT: ::core::mem::MaybeUninit<_G_fpos64_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::core::ffi::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::core::ffi::c_int,
    pub _IO_read_ptr: *mut ::core::ffi::c_char,
    pub _IO_read_end: *mut ::core::ffi::c_char,
    pub _IO_read_base: *mut ::core::ffi::c_char,
    pub _IO_write_base: *mut ::core::ffi::c_char,
    pub _IO_write_ptr: *mut ::core::ffi::c_char,
    pub _IO_write_end: *mut ::core::ffi::c_char,
    pub _IO_buf_base: *mut ::core::ffi::c_char,
    pub _IO_buf_end: *mut ::core::ffi::c_char,
    pub _IO_save_base: *mut ::core::ffi::c_char,
    pub _IO_backup_base: *mut ::core::ffi::c_char,
    pub _IO_save_end: *mut ::core::ffi::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::core::ffi::c_int,
    pub _flags2: ::core::ffi::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::core::ffi::c_ushort,
    pub _vtable_offset: ::core::ffi::c_schar,
    pub _shortbuf: [::core::ffi::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::core::ffi::c_void,
    pub __pad5: usize,
    pub _mode: ::core::ffi::c_int,
    pub _unused2: [::core::ffi::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    const UNINIT: ::core::mem::MaybeUninit<_IO_FILE> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::core::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._IO_read_ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._IO_read_end) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._IO_read_base) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._IO_write_base) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._IO_write_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._IO_write_end) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._IO_buf_base) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._IO_buf_end) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._IO_save_base) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._IO_backup_base) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._IO_save_end) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._markers) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._chain) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._fileno) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._old_offset) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._cur_column) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._vtable_offset) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._shortbuf) as usize - ptr as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._codecvt) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._wide_data) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._freeres_list) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._freeres_buf) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__pad5) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._mode) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::core::ffi::c_char,
        __new: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::core::ffi::c_int,
        __old: *const ::core::ffi::c_char,
        __newfd: ::core::ffi::c_int,
        __new: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::core::ffi::c_char,
        __pfx: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::core::ffi::c_char,
        __modes: *const ::core::ffi::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::core::ffi::c_char,
        __modes: *const ::core::ffi::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::core::ffi::c_int, __modes: *const ::core::ffi::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::core::ffi::c_void,
        __len: usize,
        __modes: *const ::core::ffi::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::core::ffi::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::core::ffi::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::core::ffi::c_char,
        __modes: ::core::ffi::c_int,
        __n: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::core::ffi::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::core::ffi::c_char, ...) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::core::ffi::c_char,
        __format: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::core::ffi::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::core::ffi::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::core::ffi::c_char,
        __format: *const ::core::ffi::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::core::ffi::c_char,
        __maxlen: ::core::ffi::c_ulong,
        __format: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::core::ffi::c_char,
        __maxlen: ::core::ffi::c_ulong,
        __format: *const ::core::ffi::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::core::ffi::c_int,
        __fmt: *const ::core::ffi::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::core::ffi::c_int,
        __fmt: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::core::ffi::c_char, ...) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::core::ffi::c_char,
        __format: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::core::ffi::c_char, ...) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::core::ffi::c_char,
        __format: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::core::ffi::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::core::ffi::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::core::ffi::c_char,
        __format: *const ::core::ffi::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::core::ffi::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::core::ffi::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::core::ffi::c_char,
        __format: *const ::core::ffi::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getchar() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fputc(__c: ::core::ffi::c_int, __stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn putc(__c: ::core::ffi::c_int, __stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn putchar(__c: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::core::ffi::c_int, __stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::core::ffi::c_int, __stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn putw(__w: ::core::ffi::c_int, __stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::core::ffi::c_char,
        __n: ::core::ffi::c_int,
        __stream: *mut FILE,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::core::ffi::c_char,
        __n: *mut usize,
        __delimiter: ::core::ffi::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::core::ffi::c_char,
        __n: *mut usize,
        __delimiter: ::core::ffi::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::core::ffi::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::core::ffi::c_char, __stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::core::ffi::c_int, __stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::core::ffi::c_void,
        __size: ::core::ffi::c_ulong,
        __n: ::core::ffi::c_ulong,
        __stream: *mut FILE,
    ) -> ::core::ffi::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::core::ffi::c_void,
        __size: ::core::ffi::c_ulong,
        __n: ::core::ffi::c_ulong,
        __s: *mut FILE,
    ) -> ::core::ffi::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::core::ffi::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::core::ffi::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::core::ffi::c_long,
        __whence: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::core::ffi::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::core::ffi::c_char,
        __modes: *const ::core::ffi::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn ctermid(__s: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
#[doc = "@brief   OS dependent lock interface."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_lock {
    #[doc = "@brief   Lock access to mount point."]
    pub lock: ::core::option::Option<unsafe extern "C" fn()>,
    #[doc = "@brief   Unlock access to mount point."]
    pub unlock: ::core::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_ext4_lock() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_lock> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_lock>(),
        16usize,
        concat!("Size of: ", stringify!(ext4_lock))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_lock>(),
        8usize,
        concat!("Alignment of ", stringify!(ext4_lock))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_lock),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).unlock) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_lock),
            "::",
            stringify!(unlock)
        )
    );
}
#[doc = "@brief   File descriptor."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_file {
    #[doc = "@brief   Mount point handle."]
    pub mp: *mut ext4_mountpoint,
    #[doc = "@brief   File inode id."]
    pub inode: u32,
    #[doc = "@brief   Open flags."]
    pub flags: u32,
    #[doc = "@brief   File size."]
    pub fsize: u64,
    #[doc = "@brief   Actual file position."]
    pub fpos: u64,
}
#[test]
fn bindgen_test_layout_ext4_file() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_file> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_file>(),
        32usize,
        concat!("Size of: ", stringify!(ext4_file))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_file>(),
        8usize,
        concat!("Alignment of ", stringify!(ext4_file))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_file),
            "::",
            stringify!(mp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_file),
            "::",
            stringify!(inode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_file),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fsize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_file),
            "::",
            stringify!(fsize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fpos) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_file),
            "::",
            stringify!(fpos)
        )
    );
}
#[doc = "@brief   Directory entry descriptor."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_direntry {
    pub inode: u32,
    pub entry_length: u16,
    pub name_length: u8,
    pub inode_type: u8,
    pub name: [u8; 255usize],
}
#[test]
fn bindgen_test_layout_ext4_direntry() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_direntry> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_direntry>(),
        264usize,
        concat!("Size of: ", stringify!(ext4_direntry))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_direntry>(),
        4usize,
        concat!("Alignment of ", stringify!(ext4_direntry))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_direntry),
            "::",
            stringify!(inode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).entry_length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_direntry),
            "::",
            stringify!(entry_length)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).name_length) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_direntry),
            "::",
            stringify!(name_length)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inode_type) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_direntry),
            "::",
            stringify!(inode_type)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_direntry),
            "::",
            stringify!(name)
        )
    );
}
#[doc = "@brief   Directory descriptor."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_dir {
    #[doc = "@brief   File descriptor."]
    pub f: ext4_file,
    #[doc = "@brief   Current directory entry."]
    pub de: ext4_direntry,
    #[doc = "@brief   Next entry offset."]
    pub next_off: u64,
}
#[test]
fn bindgen_test_layout_ext4_dir() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_dir> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_dir>(),
        304usize,
        concat!("Size of: ", stringify!(ext4_dir))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_dir>(),
        8usize,
        concat!("Alignment of ", stringify!(ext4_dir))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).f) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).de) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir),
            "::",
            stringify!(de)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).next_off) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir),
            "::",
            stringify!(next_off)
        )
    );
}
extern "C" {
    #[doc = "@brief   Register block device.\n\n @param   bd Block device.\n @param   dev_name Block device name.\n\n @return  Standard error code."]
    pub fn ext4_device_register(
        bd: *mut ext4_blockdev,
        dev_name: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Un-register block device.\n\n @param   dev_name Block device name.\n\n @return  Standard error code."]
    pub fn ext4_device_unregister(dev_name: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Un-register all block devices.\n\n @return  Standard error code."]
    pub fn ext4_device_unregister_all() -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Mount a block device with EXT4 partition to the mount point.\n\n @param   dev_name Block device name (@ref ext4_device_register).\n @param   mount_point Mount point, for example:\n          -   /\n          -   /my_partition/\n          -   /my_second_partition/\n @param   read_only mount as read-only mode.\n\n @return Standard error code"]
    pub fn ext4_mount(
        dev_name: *const ::core::ffi::c_char,
        mount_point: *const ::core::ffi::c_char,
        read_only: bool,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Umount operation.\n\n @param   mount_point Mount point.\n\n @return  Standard error code"]
    pub fn ext4_umount(mount_point: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Starts journaling. Journaling start/stop functions are transparent\n          and might be used on filesystems without journaling support.\n @warning Usage:\n              ext4_mount(\"sda1\", \"/\");\n              ext4_journal_start(\"/\");\n\n              //File operations here...\n\n              ext4_journal_stop(\"/\");\n              ext4_umount(\"/\");\n @param   mount_point Mount point.\n\n @return  Standard error code."]
    pub fn ext4_journal_start(mount_point: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Stops journaling. Journaling start/stop functions are transparent\n          and might be used on filesystems without journaling support.\n\n @param   mount_point Mount point name.\n\n @return  Standard error code."]
    pub fn ext4_journal_stop(mount_point: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Journal recovery.\n @warning Must be called after @ref ext4_mount.\n\n @param   mount_point Mount point.\n\n @return Standard error code."]
    pub fn ext4_recover(mount_point: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
#[doc = "@brief   Some of the filesystem stats."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_mount_stats {
    pub inodes_count: u32,
    pub free_inodes_count: u32,
    pub blocks_count: u64,
    pub free_blocks_count: u64,
    pub block_size: u32,
    pub block_group_count: u32,
    pub blocks_per_group: u32,
    pub inodes_per_group: u32,
    pub volume_name: [::core::ffi::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_ext4_mount_stats() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_mount_stats> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_mount_stats>(),
        56usize,
        concat!("Size of: ", stringify!(ext4_mount_stats))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_mount_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(ext4_mount_stats))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inodes_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_mount_stats),
            "::",
            stringify!(inodes_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).free_inodes_count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_mount_stats),
            "::",
            stringify!(free_inodes_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).blocks_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_mount_stats),
            "::",
            stringify!(blocks_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).free_blocks_count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_mount_stats),
            "::",
            stringify!(free_blocks_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).block_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_mount_stats),
            "::",
            stringify!(block_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).block_group_count) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_mount_stats),
            "::",
            stringify!(block_group_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).blocks_per_group) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_mount_stats),
            "::",
            stringify!(blocks_per_group)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inodes_per_group) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_mount_stats),
            "::",
            stringify!(inodes_per_group)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).volume_name) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_mount_stats),
            "::",
            stringify!(volume_name)
        )
    );
}
extern "C" {
    #[doc = "@brief   Get file mount point stats.\n\n @param   mount_point Mount point.\n @param   stats Filesystem stats.\n\n @return Standard error code."]
    pub fn ext4_mount_point_stats(
        mount_point: *const ::core::ffi::c_char,
        stats: *mut ext4_mount_stats,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Setup OS lock routines.\n\n @param   mount_point Mount point.\n @param   locks  Lock and unlock functions\n\n @return Standard error code."]
    pub fn ext4_mount_setup_locks(
        mount_point: *const ::core::ffi::c_char,
        locks: *const ext4_lock,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Acquire the filesystem superblock pointer of a mp.\n\n @param   mount_point Mount point.\n @param   sb Superblock handle\n\n @return Standard error code."]
    pub fn ext4_get_sblock(
        mount_point: *const ::core::ffi::c_char,
        sb: *mut *mut ext4_sblock,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Enable/disable write back cache mode.\n @warning Default model of cache is write trough. It means that when You do:\n\n          ext4_fopen(...);\n          ext4_fwrite(...);\n                           < --- data is flushed to physical drive\n\n          When you do:\n          ext4_cache_write_back(..., 1);\n          ext4_fopen(...);\n          ext4_fwrite(...);\n                           < --- data is NOT flushed to physical drive\n          ext4_cache_write_back(..., 0);\n                           < --- when write back mode is disabled all\n                                 cache data will be flushed\n To enable write back mode permanently just call this function\n once after ext4_mount (and disable before ext4_umount).\n\n Some of the function use write back cache mode internally.\n If you enable write back mode twice you have to disable it twice\n to flush all data:\n\n      ext4_cache_write_back(..., 1);\n      ext4_cache_write_back(..., 1);\n\n      ext4_cache_write_back(..., 0);\n      ext4_cache_write_back(..., 0);\n\n Write back mode is useful when you want to create a lot of empty\n files/directories.\n\n @param   path Mount point.\n @param   on Enable/disable cache writeback mode.\n\n @return Standard error code."]
    pub fn ext4_cache_write_back(path: *const ::core::ffi::c_char, on: bool) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Force cache flush.\n\n @param   path Mount point.\n\n @return  Standard error code."]
    pub fn ext4_cache_flush(path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Remove file by path.\n\n @param   path Path to file.\n\n @return  Standard error code."]
    pub fn ext4_fremove(path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Create a hardlink for a file.\n\n @param   path Path to file.\n @param   hardlink_path Path of hardlink.\n\n @return  Standard error code."]
    pub fn ext4_flink(
        path: *const ::core::ffi::c_char,
        hardlink_path: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief Rename file.\n @param path Source.\n @param new_path Destination.\n @return  Standard error code."]
    pub fn ext4_frename(
        path: *const ::core::ffi::c_char,
        new_path: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   File open function.\n\n @param   file  File handle.\n @param   path  File path, has to start from mount point:/my_partition/file.\n @param   flags File open flags.\n  |---------------------------------------------------------------|\n  |   r or rb                 O_RDONLY                            |\n  |---------------------------------------------------------------|\n  |   w or wb                 O_WRONLY|O_CREAT|O_TRUNC            |\n  |---------------------------------------------------------------|\n  |   a or ab                 O_WRONLY|O_CREAT|O_APPEND           |\n  |---------------------------------------------------------------|\n  |   r+ or rb+ or r+b        O_RDWR                              |\n  |---------------------------------------------------------------|\n  |   w+ or wb+ or w+b        O_RDWR|O_CREAT|O_TRUNC              |\n  |---------------------------------------------------------------|\n  |   a+ or ab+ or a+b        O_RDWR|O_CREAT|O_APPEND             |\n  |---------------------------------------------------------------|\n\n @return  Standard error code."]
    pub fn ext4_fopen(
        file: *mut ext4_file,
        path: *const ::core::ffi::c_char,
        flags: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Alternate file open function.\n\n @param   file  File handle.\n @param   path  File path, has to start from mount point:/my_partition/file.\n @param   flags File open flags.\n\n @return  Standard error code."]
    pub fn ext4_fopen2(
        file: *mut ext4_file,
        path: *const ::core::ffi::c_char,
        flags: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   File close function.\n\n @param   file File handle.\n\n @return  Standard error code."]
    pub fn ext4_fclose(file: *mut ext4_file) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   File truncate function.\n\n @param   file File handle.\n @param   size New file size.\n\n @return  Standard error code."]
    pub fn ext4_ftruncate(file: *mut ext4_file, size: u64) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Read data from file.\n\n @param   file File handle.\n @param   buf  Output buffer.\n @param   size Bytes to read.\n @param   rcnt Bytes read (NULL allowed).\n\n @return  Standard error code."]
    pub fn ext4_fread(
        file: *mut ext4_file,
        buf: *mut ::core::ffi::c_void,
        size: usize,
        rcnt: *mut usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Write data to file.\n\n @param   file File handle.\n @param   buf  Data to write\n @param   size Write length..\n @param   wcnt Bytes written (NULL allowed).\n\n @return  Standard error code."]
    pub fn ext4_fwrite(
        file: *mut ext4_file,
        buf: *const ::core::ffi::c_void,
        size: usize,
        wcnt: *mut usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   File seek operation.\n\n @param   file File handle.\n @param   offset Offset to seek.\n @param   origin Seek type:\n              @ref SEEK_SET\n              @ref SEEK_CUR\n              @ref SEEK_END\n\n @return  Standard error code."]
    pub fn ext4_fseek(file: *mut ext4_file, offset: i64, origin: u32) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Get file position.\n\n @param   file File handle.\n\n @return  Actual file position"]
    pub fn ext4_ftell(file: *mut ext4_file) -> u64;
}
extern "C" {
    #[doc = "@brief   Get file size.\n\n @param   file File handle.\n\n @return  File size."]
    pub fn ext4_fsize(file: *mut ext4_file) -> u64;
}
extern "C" {
    #[doc = "@brief Get inode of file/directory/link.\n\n @param path    Parh to file/dir/link.\n @param ret_ino Inode number.\n @param inode   Inode internals.\n\n @return  Standard error code."]
    pub fn ext4_raw_inode_fill(
        path: *const ::core::ffi::c_char,
        ret_ino: *mut u32,
        inode: *mut ext4_inode,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief Check if inode exists.\n\n @param path    Parh to file/dir/link.\n @param type    Inode type.\n                @ref EXT4_DIRENTRY_UNKNOWN\n                @ref EXT4_DE_REG_FILE\n                @ref EXT4_DE_DIR\n                @ref EXT4_DE_CHRDEV\n                @ref EXT4_DE_BLKDEV\n                @ref EXT4_DE_FIFO\n                @ref EXT4_DE_SOCK\n                @ref EXT4_DE_SYMLINK\n\n @return  Standard error code."]
    pub fn ext4_inode_exist(
        path: *const ::core::ffi::c_char,
        type_: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief Change file/directory/link mode bits.\n\n @param path Path to file/dir/link.\n @param mode New mode bits (for example 0777).\n\n @return  Standard error code."]
    pub fn ext4_mode_set(path: *const ::core::ffi::c_char, mode: u32) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief Get file/directory/link mode bits.\n\n @param path Path to file/dir/link.\n @param mode New mode bits (for example 0777).\n\n @return  Standard error code."]
    pub fn ext4_mode_get(path: *const ::core::ffi::c_char, mode: *mut u32) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief Change file owner and group.\n\n @param path Path to file/dir/link.\n @param uid  User id.\n @param gid  Group id.\n\n @return  Standard error code."]
    pub fn ext4_owner_set(
        path: *const ::core::ffi::c_char,
        uid: u32,
        gid: u32,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief Get file/directory/link owner and group.\n\n @param path Path to file/dir/link.\n @param uid  User id.\n @param gid  Group id.\n\n @return  Standard error code."]
    pub fn ext4_owner_get(
        path: *const ::core::ffi::c_char,
        uid: *mut u32,
        gid: *mut u32,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief Set file/directory/link access time.\n\n @param path  Path to file/dir/link.\n @param atime Access timestamp.\n\n @return  Standard error code."]
    pub fn ext4_atime_set(path: *const ::core::ffi::c_char, atime: u32) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief Set file/directory/link modify time.\n\n @param path  Path to file/dir/link.\n @param mtime Modify timestamp.\n\n @return  Standard error code."]
    pub fn ext4_mtime_set(path: *const ::core::ffi::c_char, mtime: u32) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief Set file/directory/link change time.\n\n @param path  Path to file/dir/link.\n @param ctime Change timestamp.\n\n @return  Standard error code."]
    pub fn ext4_ctime_set(path: *const ::core::ffi::c_char, ctime: u32) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief Get file/directory/link access time.\n\n @param path  Path to file/dir/link.\n @param atime Access timestamp.\n\n @return  Standard error code."]
    pub fn ext4_atime_get(path: *const ::core::ffi::c_char, atime: *mut u32) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief Get file/directory/link modify time.\n\n @param path  Path to file/dir/link.\n @param mtime Modify timestamp.\n\n @return  Standard error code."]
    pub fn ext4_mtime_get(path: *const ::core::ffi::c_char, mtime: *mut u32) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief Get file/directory/link change time.\n\n @param path  Pathto file/dir/link.\n @param ctime Change timestamp.\n\n @return  standard error code"]
    pub fn ext4_ctime_get(path: *const ::core::ffi::c_char, ctime: *mut u32) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief Create symbolic link.\n\n @param target Destination entry path.\n @param path   Source entry path.\n\n @return  Standard error code."]
    pub fn ext4_fsymlink(
        target: *const ::core::ffi::c_char,
        path: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief Create special file.\n @param path     Path to new special file.\n @param filetype Filetype of the new special file.\n \t           (that must not be regular file, directory, or unknown type)\n @param dev      If filetype is char device or block device,\n \t           the device number will become the payload in the inode.\n @return  Standard error code."]
    pub fn ext4_mknod(
        path: *const ::core::ffi::c_char,
        filetype: ::core::ffi::c_int,
        dev: u32,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief Read symbolic link payload.\n\n @param path    Path to symlink.\n @param buf     Output buffer.\n @param bufsize Output buffer max size.\n @param rcnt    Bytes read.\n\n @return  Standard error code."]
    pub fn ext4_readlink(
        path: *const ::core::ffi::c_char,
        buf: *mut ::core::ffi::c_char,
        bufsize: usize,
        rcnt: *mut usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief Set extended attribute.\n\n @param path      Path to file/directory\n @param name      Name of the entry to add.\n @param name_len  Length of @name in bytes.\n @param data      Data of the entry to add.\n @param data_size Size of data to add.\n\n @return  Standard error code."]
    pub fn ext4_setxattr(
        path: *const ::core::ffi::c_char,
        name: *const ::core::ffi::c_char,
        name_len: usize,
        data: *const ::core::ffi::c_void,
        data_size: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief Get extended attribute.\n\n @param path      Path to file/directory.\n @param name      Name of the entry to get.\n @param name_len  Length of @name in bytes.\n @param buf      Data of the entry to get.\n @param buf_size Size of data to get.\n\n @return  Standard error code."]
    pub fn ext4_getxattr(
        path: *const ::core::ffi::c_char,
        name: *const ::core::ffi::c_char,
        name_len: usize,
        buf: *mut ::core::ffi::c_void,
        buf_size: usize,
        data_size: *mut usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief List extended attributes.\n\n @param path     Path to file/directory.\n @param list     List to hold the name of entries.\n @param size     Size of @list in bytes.\n @param ret_size Used bytes of @list.\n\n @return  Standard error code."]
    pub fn ext4_listxattr(
        path: *const ::core::ffi::c_char,
        list: *mut ::core::ffi::c_char,
        size: usize,
        ret_size: *mut usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief Remove extended attribute.\n\n @param path     Path to file/directory.\n @param name     Name of the entry to remove.\n @param name_len Length of @name in bytes.\n\n @return  Standard error code."]
    pub fn ext4_removexattr(
        path: *const ::core::ffi::c_char,
        name: *const ::core::ffi::c_char,
        name_len: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Recursive directory remove.\n\n @param   path Directory path to remove\n\n @return  Standard error code."]
    pub fn ext4_dir_rm(path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief Rename/move directory.\n\n @param path     Source path.\n @param new_path Destination path.\n\n @return  Standard error code."]
    pub fn ext4_dir_mv(
        path: *const ::core::ffi::c_char,
        new_path: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Create new directory.\n\n @param   path Directory name.\n\n @return  Standard error code."]
    pub fn ext4_dir_mk(path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Directory open.\n\n @param   dir  Directory handle.\n @param   path Directory path.\n\n @return  Standard error code."]
    pub fn ext4_dir_open(
        dir: *mut ext4_dir,
        path: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Directory close.\n\n @param   dir directory handle.\n\n @return  Standard error code."]
    pub fn ext4_dir_close(dir: *mut ext4_dir) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Return next directory entry.\n\n @param   dir Directory handle.\n\n @return  Directory entry id (NULL if no entry)"]
    pub fn ext4_dir_entry_next(dir: *mut ext4_dir) -> *const ext4_direntry;
}
extern "C" {
    #[doc = "@brief   Rewine directory entry offset.\n\n @param   dir Directory handle."]
    pub fn ext4_dir_entry_rewind(dir: *mut ext4_dir);
}
#[doc = "@brief   The filesystem this block device belongs to."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_fs {
    pub _address: u8,
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::core::ffi::c_uint,
    pub fp_offset: ::core::ffi::c_uint,
    pub overflow_arg_area: *mut ::core::ffi::c_void,
    pub reg_save_area: *mut ::core::ffi::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    const UNINIT: ::core::mem::MaybeUninit<__va_list_tag> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::core::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[doc = "@brief   Mount point handle."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_mountpoint {
    pub _address: u8,
}
