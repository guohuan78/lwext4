/* automatically generated by rust-bindgen 0.65.1 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::core::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::core::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::core::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::core::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::core::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const CONFIG_USE_DEFAULT_CONFIG: u32 = 0;
pub const CONFIG_HAVE_OWN_OFLAGS: u32 = 0;
pub const CONFIG_HAVE_OWN_ERRNO: u32 = 0;
pub const CONFIG_HAVE_OWN_ASSERT: u32 = 0;
pub const CONFIG_BLOCK_DEV_CACHE_SIZE: u32 = 16;
pub const F_SET_EXT2: u32 = 2;
pub const F_SET_EXT3: u32 = 3;
pub const F_SET_EXT4: u32 = 4;
pub const CONFIG_EXT_FEATURE_SET_LVL: u32 = 4;
pub const CONFIG_JOURNALING_ENABLE: u32 = 1;
pub const CONFIG_XATTR_ENABLE: u32 = 1;
pub const CONFIG_EXTENTS_ENABLE: u32 = 1;
pub const CONFIG_DEBUG_PRINTF: u32 = 1;
pub const CONFIG_DEBUG_ASSERT: u32 = 1;
pub const CONFIG_BLOCK_DEV_ENABLE_STATS: u32 = 1;
pub const CONFIG_EXT4_MAX_BLOCKDEV_NAME: u32 = 32;
pub const CONFIG_EXT4_BLOCKDEVS_COUNT: u32 = 2;
pub const CONFIG_EXT4_MAX_MP_NAME: u32 = 32;
pub const CONFIG_EXT4_MOUNTPOINTS_COUNT: u32 = 2;
pub const CONFIG_MAX_TRUNCATE_SIZE: u32 = 16777216;
pub const CONFIG_UNALIGNED_ACCESS: u32 = 0;
pub const CONFIG_USE_USER_MALLOC: u32 = 0;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const SPLAY_NEGINF: i32 = -1;
pub const SPLAY_INF: u32 = 1;
pub const RB_BLACK: u32 = 0;
pub const RB_RED: u32 = 1;
pub const RB_NEGINF: i32 = -1;
pub const RB_INF: u32 = 1;
pub const EXT4_CHECKSUM_CRC32C: u32 = 1;
pub const UUID_SIZE: u32 = 16;
pub const EXT4_SUPERBLOCK_MAGIC: u32 = 61267;
pub const EXT4_SUPERBLOCK_SIZE: u32 = 1024;
pub const EXT4_SUPERBLOCK_OFFSET: u32 = 1024;
pub const EXT4_SUPERBLOCK_OS_LINUX: u32 = 0;
pub const EXT4_SUPERBLOCK_OS_HURD: u32 = 1;
pub const EXT4_SUPERBLOCK_FLAGS_SIGNED_HASH: u32 = 1;
pub const EXT4_SUPERBLOCK_FLAGS_UNSIGNED_HASH: u32 = 2;
pub const EXT4_SUPERBLOCK_FLAGS_TEST_FILESYS: u32 = 4;
pub const EXT4_SUPERBLOCK_STATE_VALID_FS: u32 = 1;
pub const EXT4_SUPERBLOCK_STATE_ERROR_FS: u32 = 2;
pub const EXT4_SUPERBLOCK_STATE_ORPHAN_FS: u32 = 4;
pub const EXT4_SUPERBLOCK_ERRORS_CONTINUE: u32 = 1;
pub const EXT4_SUPERBLOCK_ERRORS_RO: u32 = 2;
pub const EXT4_SUPERBLOCK_ERRORS_PANIC: u32 = 3;
pub const EXT4_FCOM_DIR_PREALLOC: u32 = 1;
pub const EXT4_FCOM_IMAGIC_INODES: u32 = 2;
pub const EXT4_FCOM_HAS_JOURNAL: u32 = 4;
pub const EXT4_FCOM_EXT_ATTR: u32 = 8;
pub const EXT4_FCOM_RESIZE_INODE: u32 = 16;
pub const EXT4_FCOM_DIR_INDEX: u32 = 32;
pub const EXT4_FRO_COM_SPARSE_SUPER: u32 = 1;
pub const EXT4_FRO_COM_LARGE_FILE: u32 = 2;
pub const EXT4_FRO_COM_BTREE_DIR: u32 = 4;
pub const EXT4_FRO_COM_HUGE_FILE: u32 = 8;
pub const EXT4_FRO_COM_GDT_CSUM: u32 = 16;
pub const EXT4_FRO_COM_DIR_NLINK: u32 = 32;
pub const EXT4_FRO_COM_EXTRA_ISIZE: u32 = 64;
pub const EXT4_FRO_COM_QUOTA: u32 = 256;
pub const EXT4_FRO_COM_BIGALLOC: u32 = 512;
pub const EXT4_FRO_COM_METADATA_CSUM: u32 = 1024;
pub const EXT4_FINCOM_COMPRESSION: u32 = 1;
pub const EXT4_FINCOM_FILETYPE: u32 = 2;
pub const EXT4_FINCOM_RECOVER: u32 = 4;
pub const EXT4_FINCOM_JOURNAL_DEV: u32 = 8;
pub const EXT4_FINCOM_META_BG: u32 = 16;
pub const EXT4_FINCOM_EXTENTS: u32 = 64;
pub const EXT4_FINCOM_64BIT: u32 = 128;
pub const EXT4_FINCOM_MMP: u32 = 256;
pub const EXT4_FINCOM_FLEX_BG: u32 = 512;
pub const EXT4_FINCOM_EA_INODE: u32 = 1024;
pub const EXT4_FINCOM_DIRDATA: u32 = 4096;
pub const EXT4_FINCOM_BG_USE_META_CSUM: u32 = 8192;
pub const EXT4_FINCOM_LARGEDIR: u32 = 16384;
pub const EXT4_FINCOM_INLINE_DATA: u32 = 32768;
pub const EXT2_SUPPORTED_FCOM: u32 = 0;
pub const EXT2_SUPPORTED_FINCOM: u32 = 18;
pub const EXT2_SUPPORTED_FRO_COM: u32 = 3;
pub const EXT3_SUPPORTED_FCOM: u32 = 32;
pub const EXT3_SUPPORTED_FINCOM: u32 = 18;
pub const EXT3_SUPPORTED_FRO_COM: u32 = 3;
pub const EXT4_SUPPORTED_FCOM: u32 = 32;
pub const EXT4_SUPPORTED_FINCOM: u32 = 722;
pub const EXT4_SUPPORTED_FRO_COM: u32 = 1147;
pub const EXT_FINCOM_IGNORED: u32 = 260;
pub const EXT4_BLOCK_GROUP_INODE_UNINIT: u32 = 1;
pub const EXT4_BLOCK_GROUP_BLOCK_UNINIT: u32 = 2;
pub const EXT4_BLOCK_GROUP_ITABLE_ZEROED: u32 = 4;
pub const EXT4_MIN_BLOCK_GROUP_DESCRIPTOR_SIZE: u32 = 32;
pub const EXT4_MAX_BLOCK_GROUP_DESCRIPTOR_SIZE: u32 = 64;
pub const EXT4_MIN_BLOCK_SIZE: u32 = 1024;
pub const EXT4_MAX_BLOCK_SIZE: u32 = 65536;
pub const EXT4_REV0_INODE_SIZE: u32 = 128;
pub const EXT4_INODE_BLOCK_SIZE: u32 = 512;
pub const EXT4_INODE_DIRECT_BLOCK_COUNT: u32 = 12;
pub const EXT4_INODE_INDIRECT_BLOCK: u32 = 12;
pub const EXT4_INODE_DOUBLE_INDIRECT_BLOCK: u32 = 13;
pub const EXT4_INODE_TRIPPLE_INDIRECT_BLOCK: u32 = 14;
pub const EXT4_INODE_BLOCKS: u32 = 15;
pub const EXT4_INODE_INDIRECT_BLOCK_COUNT: u32 = 3;
pub const EXT4_INODE_MODE_FIFO: u32 = 4096;
pub const EXT4_INODE_MODE_CHARDEV: u32 = 8192;
pub const EXT4_INODE_MODE_DIRECTORY: u32 = 16384;
pub const EXT4_INODE_MODE_BLOCKDEV: u32 = 24576;
pub const EXT4_INODE_MODE_FILE: u32 = 32768;
pub const EXT4_INODE_MODE_SOFTLINK: u32 = 40960;
pub const EXT4_INODE_MODE_SOCKET: u32 = 49152;
pub const EXT4_INODE_MODE_TYPE_MASK: u32 = 61440;
pub const EXT4_INODE_FLAG_SECRM: u32 = 1;
pub const EXT4_INODE_FLAG_UNRM: u32 = 2;
pub const EXT4_INODE_FLAG_COMPR: u32 = 4;
pub const EXT4_INODE_FLAG_SYNC: u32 = 8;
pub const EXT4_INODE_FLAG_IMMUTABLE: u32 = 16;
pub const EXT4_INODE_FLAG_APPEND: u32 = 32;
pub const EXT4_INODE_FLAG_NODUMP: u32 = 64;
pub const EXT4_INODE_FLAG_NOATIME: u32 = 128;
pub const EXT4_INODE_FLAG_DIRTY: u32 = 256;
pub const EXT4_INODE_FLAG_COMPRBLK: u32 = 512;
pub const EXT4_INODE_FLAG_NOCOMPR: u32 = 1024;
pub const EXT4_INODE_FLAG_ECOMPR: u32 = 2048;
pub const EXT4_INODE_FLAG_INDEX: u32 = 4096;
pub const EXT4_INODE_FLAG_IMAGIC: u32 = 8192;
pub const EXT4_INODE_FLAG_JOURNAL_DATA: u32 = 16384;
pub const EXT4_INODE_FLAG_NOTAIL: u32 = 32768;
pub const EXT4_INODE_FLAG_DIRSYNC: u32 = 65536;
pub const EXT4_INODE_FLAG_TOPDIR: u32 = 131072;
pub const EXT4_INODE_FLAG_HUGE_FILE: u32 = 262144;
pub const EXT4_INODE_FLAG_EXTENTS: u32 = 524288;
pub const EXT4_INODE_FLAG_EA_INODE: u32 = 2097152;
pub const EXT4_INODE_FLAG_EOFBLOCKS: u32 = 4194304;
pub const EXT4_INODE_FLAG_RESERVED: u32 = 2147483648;
pub const EXT4_INODE_ROOT_INDEX: u32 = 2;
pub const EXT4_DIRECTORY_FILENAME_LEN: u32 = 255;
pub const EXT4_DIRENTRY_DIR_CSUM: u32 = 222;
pub const EXT4_ERR_BAD_DX_DIR: i32 = -25000;
pub const EXT4_LINK_MAX: u32 = 65000;
pub const EXT4_BAD_INO: u32 = 1;
pub const EXT4_ROOT_INO: u32 = 2;
pub const EXT4_BOOT_LOADER_INO: u32 = 5;
pub const EXT4_UNDEL_DIR_INO: u32 = 6;
pub const EXT4_RESIZE_INO: u32 = 7;
pub const EXT4_JOURNAL_INO: u32 = 8;
pub const EXT4_GOOD_OLD_FIRST_INO: u32 = 11;
pub const EXT2_HTREE_LEGACY: u32 = 0;
pub const EXT2_HTREE_HALF_MD4: u32 = 1;
pub const EXT2_HTREE_TEA: u32 = 2;
pub const EXT2_HTREE_LEGACY_UNSIGNED: u32 = 3;
pub const EXT2_HTREE_HALF_MD4_UNSIGNED: u32 = 4;
pub const EXT2_HTREE_TEA_UNSIGNED: u32 = 5;
pub const EXT2_HTREE_EOF: u32 = 2147483647;
pub const EXT4_GOOD_OLD_INODE_SIZE: u32 = 128;
pub const JBD_MAGIC_NUMBER: u32 = 3225106840;
pub const JBD_DESCRIPTOR_BLOCK: u32 = 1;
pub const JBD_COMMIT_BLOCK: u32 = 2;
pub const JBD_SUPERBLOCK: u32 = 3;
pub const JBD_SUPERBLOCK_V2: u32 = 4;
pub const JBD_REVOKE_BLOCK: u32 = 5;
pub const JBD_CRC32_CHKSUM: u32 = 1;
pub const JBD_MD5_CHKSUM: u32 = 2;
pub const JBD_SHA1_CHKSUM: u32 = 3;
pub const JBD_CRC32C_CHKSUM: u32 = 4;
pub const JBD_CRC32_CHKSUM_SIZE: u32 = 4;
pub const JBD_FLAG_ESCAPE: u32 = 1;
pub const JBD_FLAG_SAME_UUID: u32 = 2;
pub const JBD_FLAG_DELETED: u32 = 4;
pub const JBD_FLAG_LAST_TAG: u32 = 8;
pub const JBD_USERS_MAX: u32 = 48;
pub const JBD_USERS_SIZE: u32 = 768;
pub const JBD_FEATURE_COMPAT_CHECKSUM: u32 = 1;
pub const JBD_FEATURE_INCOMPAT_REVOKE: u32 = 1;
pub const JBD_FEATURE_INCOMPAT_64BIT: u32 = 2;
pub const JBD_FEATURE_INCOMPAT_ASYNC_COMMIT: u32 = 4;
pub const JBD_FEATURE_INCOMPAT_CSUM_V2: u32 = 8;
pub const JBD_FEATURE_INCOMPAT_CSUM_V3: u32 = 16;
pub const JBD_KNOWN_COMPAT_FEATURES: u32 = 0;
pub const JBD_KNOWN_ROCOMPAT_FEATURES: u32 = 0;
pub const JBD_KNOWN_INCOMPAT_FEATURES: u32 = 31;
pub const EXT4_CRC32_INIT: u32 = 4294967295;
pub type __u_char = ::core::ffi::c_uchar;
pub type __u_short = ::core::ffi::c_ushort;
pub type __u_int = ::core::ffi::c_uint;
pub type __u_long = ::core::ffi::c_ulong;
pub type __int8_t = ::core::ffi::c_schar;
pub type __uint8_t = ::core::ffi::c_uchar;
pub type __int16_t = ::core::ffi::c_short;
pub type __uint16_t = ::core::ffi::c_ushort;
pub type __int32_t = ::core::ffi::c_int;
pub type __uint32_t = ::core::ffi::c_uint;
pub type __int64_t = ::core::ffi::c_long;
pub type __uint64_t = ::core::ffi::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::core::ffi::c_long;
pub type __u_quad_t = ::core::ffi::c_ulong;
pub type __intmax_t = ::core::ffi::c_long;
pub type __uintmax_t = ::core::ffi::c_ulong;
pub type __dev_t = ::core::ffi::c_ulong;
pub type __uid_t = ::core::ffi::c_uint;
pub type __gid_t = ::core::ffi::c_uint;
pub type __ino_t = ::core::ffi::c_ulong;
pub type __ino64_t = ::core::ffi::c_ulong;
pub type __mode_t = ::core::ffi::c_uint;
pub type __nlink_t = ::core::ffi::c_ulong;
pub type __off_t = ::core::ffi::c_long;
pub type __off64_t = ::core::ffi::c_long;
pub type __pid_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::core::ffi::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::core::mem::MaybeUninit<__fsid_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::core::ffi::c_long;
pub type __rlim_t = ::core::ffi::c_ulong;
pub type __rlim64_t = ::core::ffi::c_ulong;
pub type __id_t = ::core::ffi::c_uint;
pub type __time_t = ::core::ffi::c_long;
pub type __useconds_t = ::core::ffi::c_uint;
pub type __suseconds_t = ::core::ffi::c_long;
pub type __suseconds64_t = ::core::ffi::c_long;
pub type __daddr_t = ::core::ffi::c_int;
pub type __key_t = ::core::ffi::c_int;
pub type __clockid_t = ::core::ffi::c_int;
pub type __timer_t = *mut ::core::ffi::c_void;
pub type __blksize_t = ::core::ffi::c_long;
pub type __blkcnt_t = ::core::ffi::c_long;
pub type __blkcnt64_t = ::core::ffi::c_long;
pub type __fsblkcnt_t = ::core::ffi::c_ulong;
pub type __fsblkcnt64_t = ::core::ffi::c_ulong;
pub type __fsfilcnt_t = ::core::ffi::c_ulong;
pub type __fsfilcnt64_t = ::core::ffi::c_ulong;
pub type __fsword_t = ::core::ffi::c_long;
pub type __ssize_t = ::core::ffi::c_long;
pub type __syscall_slong_t = ::core::ffi::c_long;
pub type __syscall_ulong_t = ::core::ffi::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::core::ffi::c_char;
pub type __intptr_t = ::core::ffi::c_long;
pub type __socklen_t = ::core::ffi::c_uint;
pub type __sig_atomic_t = ::core::ffi::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::core::ffi::c_schar;
pub type int_fast16_t = ::core::ffi::c_long;
pub type int_fast32_t = ::core::ffi::c_long;
pub type int_fast64_t = ::core::ffi::c_long;
pub type uint_fast8_t = ::core::ffi::c_uchar;
pub type uint_fast16_t = ::core::ffi::c_ulong;
pub type uint_fast32_t = ::core::ffi::c_ulong;
pub type uint_fast64_t = ::core::ffi::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[doc = "@brief   Single block descriptor"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_block {
    #[doc = "@brief   Logical block ID"]
    pub lb_id: u64,
    #[doc = "@brief   Buffer"]
    pub buf: *mut ext4_buf,
    #[doc = "@brief   Data buffer."]
    pub data: *mut u8,
}
#[test]
fn bindgen_test_layout_ext4_block() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_block> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_block>(),
        24usize,
        concat!("Size of: ", stringify!(ext4_block))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_block>(),
        8usize,
        concat!("Alignment of ", stringify!(ext4_block))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lb_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_block),
            "::",
            stringify!(lb_id)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_block),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_block),
            "::",
            stringify!(data)
        )
    );
}
#[doc = "@brief   Single block descriptor"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_buf {
    #[doc = "@brief   Flags"]
    pub flags: ::core::ffi::c_int,
    #[doc = "@brief   Logical block address"]
    pub lba: u64,
    #[doc = "@brief   Data buffer."]
    pub data: *mut u8,
    #[doc = "@brief   LRU priority. (unused)"]
    pub lru_prio: u32,
    #[doc = "@brief   LRU id."]
    pub lru_id: u32,
    #[doc = "@brief   Reference count table"]
    pub refctr: u32,
    #[doc = "@brief   The block cache this buffer belongs to."]
    pub bc: *mut ext4_bcache,
    #[doc = "@brief   Whether or not buffer is on dirty list."]
    pub on_dirty_list: bool,
    #[doc = "@brief   LBA tree node"]
    pub lba_node: ext4_buf__bindgen_ty_1,
    #[doc = "@brief   LRU tree node"]
    pub lru_node: ext4_buf__bindgen_ty_2,
    #[doc = "@brief   Dirty list node"]
    pub dirty_node: ext4_buf__bindgen_ty_3,
    #[doc = "@brief   Callback routine after a disk-write operation.\n @param   bc block cache descriptor\n @param   buf buffer descriptor\n @param   standard error code returned by bdev->bwrite()\n @param   arg argument passed to this routine"]
    pub end_write: ::core::option::Option<
        unsafe extern "C" fn(
            bc: *mut ext4_bcache,
            buf: *mut ext4_buf,
            res: ::core::ffi::c_int,
            arg: *mut ::core::ffi::c_void,
        ),
    >,
    #[doc = "@brief   argument passed to end_write() callback."]
    pub end_write_arg: *mut ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_buf__bindgen_ty_1 {
    pub rbe_left: *mut ext4_buf,
    pub rbe_right: *mut ext4_buf,
    pub rbe_parent: *mut ext4_buf,
    pub rbe_color: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_ext4_buf__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_buf__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_buf__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(ext4_buf__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_buf__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ext4_buf__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rbe_left) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf__bindgen_ty_1),
            "::",
            stringify!(rbe_left)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rbe_right) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf__bindgen_ty_1),
            "::",
            stringify!(rbe_right)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rbe_parent) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf__bindgen_ty_1),
            "::",
            stringify!(rbe_parent)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rbe_color) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf__bindgen_ty_1),
            "::",
            stringify!(rbe_color)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_buf__bindgen_ty_2 {
    pub rbe_left: *mut ext4_buf,
    pub rbe_right: *mut ext4_buf,
    pub rbe_parent: *mut ext4_buf,
    pub rbe_color: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_ext4_buf__bindgen_ty_2() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_buf__bindgen_ty_2> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_buf__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(ext4_buf__bindgen_ty_2))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_buf__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(ext4_buf__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rbe_left) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf__bindgen_ty_2),
            "::",
            stringify!(rbe_left)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rbe_right) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf__bindgen_ty_2),
            "::",
            stringify!(rbe_right)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rbe_parent) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf__bindgen_ty_2),
            "::",
            stringify!(rbe_parent)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rbe_color) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf__bindgen_ty_2),
            "::",
            stringify!(rbe_color)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_buf__bindgen_ty_3 {
    pub sle_next: *mut ext4_buf,
}
#[test]
fn bindgen_test_layout_ext4_buf__bindgen_ty_3() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_buf__bindgen_ty_3> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_buf__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(ext4_buf__bindgen_ty_3))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_buf__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(ext4_buf__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sle_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf__bindgen_ty_3),
            "::",
            stringify!(sle_next)
        )
    );
}
#[test]
fn bindgen_test_layout_ext4_buf() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_buf> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_buf>(),
        144usize,
        concat!("Size of: ", stringify!(ext4_buf))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_buf>(),
        8usize,
        concat!("Alignment of ", stringify!(ext4_buf))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lba) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf),
            "::",
            stringify!(lba)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lru_prio) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf),
            "::",
            stringify!(lru_prio)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lru_id) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf),
            "::",
            stringify!(lru_id)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).refctr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf),
            "::",
            stringify!(refctr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bc) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf),
            "::",
            stringify!(bc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).on_dirty_list) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf),
            "::",
            stringify!(on_dirty_list)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lba_node) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf),
            "::",
            stringify!(lba_node)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lru_node) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf),
            "::",
            stringify!(lru_node)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dirty_node) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf),
            "::",
            stringify!(dirty_node)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).end_write) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf),
            "::",
            stringify!(end_write)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).end_write_arg) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_buf),
            "::",
            stringify!(end_write_arg)
        )
    );
}
#[doc = "@brief   Block cache descriptor"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_bcache {
    #[doc = "@brief   Item count in block cache"]
    pub cnt: u32,
    #[doc = "@brief   Item size in block cache"]
    pub itemsize: u32,
    #[doc = "@brief   Last recently used counter"]
    pub lru_ctr: u32,
    #[doc = "@brief   Currently referenced datablocks"]
    pub ref_blocks: u32,
    #[doc = "@brief   Maximum referenced datablocks"]
    pub max_ref_blocks: u32,
    #[doc = "@brief   The blockdev binded to this block cache"]
    pub bdev: *mut ext4_blockdev,
    #[doc = "@brief   The cache should not be shaked"]
    pub dont_shake: bool,
    #[doc = "@brief   A tree holding all bufs"]
    pub lba_root: ext4_bcache_ext4_buf_lba,
    #[doc = "@brief   A tree holding unreferenced bufs"]
    pub lru_root: ext4_bcache_ext4_buf_lru,
    #[doc = "@brief   A singly-linked list holding dirty buffers"]
    pub dirty_list: ext4_bcache_ext4_buf_dirty,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_bcache_ext4_buf_lba {
    pub rbh_root: *mut ext4_buf,
}
#[test]
fn bindgen_test_layout_ext4_bcache_ext4_buf_lba() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_bcache_ext4_buf_lba> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_bcache_ext4_buf_lba>(),
        8usize,
        concat!("Size of: ", stringify!(ext4_bcache_ext4_buf_lba))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_bcache_ext4_buf_lba>(),
        8usize,
        concat!("Alignment of ", stringify!(ext4_bcache_ext4_buf_lba))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rbh_root) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bcache_ext4_buf_lba),
            "::",
            stringify!(rbh_root)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_bcache_ext4_buf_lru {
    pub rbh_root: *mut ext4_buf,
}
#[test]
fn bindgen_test_layout_ext4_bcache_ext4_buf_lru() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_bcache_ext4_buf_lru> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_bcache_ext4_buf_lru>(),
        8usize,
        concat!("Size of: ", stringify!(ext4_bcache_ext4_buf_lru))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_bcache_ext4_buf_lru>(),
        8usize,
        concat!("Alignment of ", stringify!(ext4_bcache_ext4_buf_lru))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rbh_root) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bcache_ext4_buf_lru),
            "::",
            stringify!(rbh_root)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_bcache_ext4_buf_dirty {
    pub slh_first: *mut ext4_buf,
}
#[test]
fn bindgen_test_layout_ext4_bcache_ext4_buf_dirty() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_bcache_ext4_buf_dirty> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_bcache_ext4_buf_dirty>(),
        8usize,
        concat!("Size of: ", stringify!(ext4_bcache_ext4_buf_dirty))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_bcache_ext4_buf_dirty>(),
        8usize,
        concat!("Alignment of ", stringify!(ext4_bcache_ext4_buf_dirty))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).slh_first) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bcache_ext4_buf_dirty),
            "::",
            stringify!(slh_first)
        )
    );
}
#[test]
fn bindgen_test_layout_ext4_bcache() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_bcache> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_bcache>(),
        64usize,
        concat!("Size of: ", stringify!(ext4_bcache))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_bcache>(),
        8usize,
        concat!("Alignment of ", stringify!(ext4_bcache))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cnt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bcache),
            "::",
            stringify!(cnt)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).itemsize) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bcache),
            "::",
            stringify!(itemsize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lru_ctr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bcache),
            "::",
            stringify!(lru_ctr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ref_blocks) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bcache),
            "::",
            stringify!(ref_blocks)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).max_ref_blocks) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bcache),
            "::",
            stringify!(max_ref_blocks)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bdev) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bcache),
            "::",
            stringify!(bdev)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dont_shake) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bcache),
            "::",
            stringify!(dont_shake)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lba_root) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bcache),
            "::",
            stringify!(lba_root)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lru_root) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bcache),
            "::",
            stringify!(lru_root)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dirty_list) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bcache),
            "::",
            stringify!(dirty_list)
        )
    );
}
pub const bcache_state_bits_BC_UPTODATE: bcache_state_bits = 0;
pub const bcache_state_bits_BC_DIRTY: bcache_state_bits = 1;
pub const bcache_state_bits_BC_FLUSH: bcache_state_bits = 2;
pub const bcache_state_bits_BC_TMP: bcache_state_bits = 3;
#[doc = "@brief buffer state bits\n\n  - BC♡UPTODATE: Buffer contains valid data.\n  - BC_DIRTY: Buffer is dirty.\n  - BC_FLUSH: Buffer will be immediately flushed,\n              when no one references it.\n  - BC_TMP: Buffer will be dropped once its refctr\n            reaches zero."]
pub type bcache_state_bits = ::core::ffi::c_uint;
extern "C" {
    #[doc = "@brief   Dynamic initialization of block cache.\n @param   bc block cache descriptor\n @param   cnt items count in block cache\n @param   itemsize single item size (in bytes)\n @return  standard error code"]
    pub fn ext4_bcache_init_dynamic(
        bc: *mut ext4_bcache,
        cnt: u32,
        itemsize: u32,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Do cleanup works on block cache.\n @param   bc block cache descriptor."]
    pub fn ext4_bcache_cleanup(bc: *mut ext4_bcache);
}
extern "C" {
    #[doc = "@brief   Dynamic de-initialization of block cache.\n @param   bc block cache descriptor\n @return  standard error code"]
    pub fn ext4_bcache_fini_dynamic(bc: *mut ext4_bcache) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Get a buffer with the lowest LRU counter in bcache.\n @param   bc block cache descriptor\n @return  buffer with the lowest LRU counter"]
    pub fn ext4_buf_lowest_lru(bc: *mut ext4_bcache) -> *mut ext4_buf;
}
extern "C" {
    #[doc = "@brief   Drop unreferenced buffer from bcache.\n @param   bc block cache descriptor\n @param   buf buffer"]
    pub fn ext4_bcache_drop_buf(bc: *mut ext4_bcache, buf: *mut ext4_buf);
}
extern "C" {
    #[doc = "@brief   Invalidate a buffer.\n @param   bc block cache descriptor\n @param   buf buffer"]
    pub fn ext4_bcache_invalidate_buf(bc: *mut ext4_bcache, buf: *mut ext4_buf);
}
extern "C" {
    #[doc = "@brief   Invalidate a range of buffers.\n @param   bc block cache descriptor\n @param   from starting lba\n @param   cnt block counts"]
    pub fn ext4_bcache_invalidate_lba(bc: *mut ext4_bcache, from: u64, cnt: u32);
}
extern "C" {
    #[doc = "@brief   Find existing buffer from block cache memory.\n          Unreferenced block allocation is based on LRU\n          (Last Recently Used) algorithm.\n @param   bc block cache descriptor\n @param   b block to alloc\n @param   lba logical block address\n @return  block cache buffer"]
    pub fn ext4_bcache_find_get(
        bc: *mut ext4_bcache,
        b: *mut ext4_block,
        lba: u64,
    ) -> *mut ext4_buf;
}
extern "C" {
    #[doc = "@brief   Allocate block from block cache memory.\n          Unreferenced block allocation is based on LRU\n          (Last Recently Used) algorithm.\n @param   bc block cache descriptor\n @param   b block to alloc\n @param   is_new block is new (needs to be read)\n @return  standard error code"]
    pub fn ext4_bcache_alloc(
        bc: *mut ext4_bcache,
        b: *mut ext4_block,
        is_new: *mut bool,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Free block from cache memory (decrement reference counter).\n @param   bc block cache descriptor\n @param   b block to free\n @return  standard error code"]
    pub fn ext4_bcache_free(bc: *mut ext4_bcache, b: *mut ext4_block) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Return a full status of block cache.\n @param   bc block cache descriptor\n @return  full status"]
    pub fn ext4_bcache_is_full(bc: *mut ext4_bcache) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_blockdev_iface {
    #[doc = "@brief   Open device function\n @param   bdev block device."]
    pub open: ::core::option::Option<
        unsafe extern "C" fn(bdev: *mut ext4_blockdev) -> ::core::ffi::c_int,
    >,
    #[doc = "@brief   Block read function.\n @param   bdev block device\n @param   buf output buffer\n @param   blk_id block id\n @param   blk_cnt block count"]
    pub bread: ::core::option::Option<
        unsafe extern "C" fn(
            bdev: *mut ext4_blockdev,
            buf: *mut ::core::ffi::c_void,
            blk_id: u64,
            blk_cnt: u32,
        ) -> ::core::ffi::c_int,
    >,
    #[doc = "@brief   Block write function.\n @param   buf input buffer\n @param   blk_id block id\n @param   blk_cnt block count"]
    pub bwrite: ::core::option::Option<
        unsafe extern "C" fn(
            bdev: *mut ext4_blockdev,
            buf: *const ::core::ffi::c_void,
            blk_id: u64,
            blk_cnt: u32,
        ) -> ::core::ffi::c_int,
    >,
    #[doc = "@brief   Close device function.\n @param   bdev block device."]
    pub close: ::core::option::Option<
        unsafe extern "C" fn(bdev: *mut ext4_blockdev) -> ::core::ffi::c_int,
    >,
    #[doc = "@brief   Lock block device. Required in multi partition mode\n          operations. Not mandatory field.\n @param   bdev block device."]
    pub lock: ::core::option::Option<
        unsafe extern "C" fn(bdev: *mut ext4_blockdev) -> ::core::ffi::c_int,
    >,
    #[doc = "@brief   Unlock block device. Required in multi partition mode\n          operations. Not mandatory field.\n @param   bdev block device."]
    pub unlock: ::core::option::Option<
        unsafe extern "C" fn(bdev: *mut ext4_blockdev) -> ::core::ffi::c_int,
    >,
    #[doc = "@brief   Block size (bytes): physical"]
    pub ph_bsize: u32,
    #[doc = "@brief   Block count: physical"]
    pub ph_bcnt: u64,
    #[doc = "@brief   Block size buffer: physical"]
    pub ph_bbuf: *mut u8,
    #[doc = "@brief   Reference counter to block device interface"]
    pub ph_refctr: u32,
    #[doc = "@brief   Physical read counter"]
    pub bread_ctr: u32,
    #[doc = "@brief   Physical write counter"]
    pub bwrite_ctr: u32,
    #[doc = "@brief   User data pointer"]
    pub p_user: *mut ::core::ffi::c_void,
}
#[test]
fn bindgen_test_layout_ext4_blockdev_iface() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_blockdev_iface> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_blockdev_iface>(),
        96usize,
        concat!("Size of: ", stringify!(ext4_blockdev_iface))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_blockdev_iface>(),
        8usize,
        concat!("Alignment of ", stringify!(ext4_blockdev_iface))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).open) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev_iface),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bread) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev_iface),
            "::",
            stringify!(bread)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bwrite) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev_iface),
            "::",
            stringify!(bwrite)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev_iface),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev_iface),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).unlock) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev_iface),
            "::",
            stringify!(unlock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ph_bsize) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev_iface),
            "::",
            stringify!(ph_bsize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ph_bcnt) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev_iface),
            "::",
            stringify!(ph_bcnt)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ph_bbuf) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev_iface),
            "::",
            stringify!(ph_bbuf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ph_refctr) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev_iface),
            "::",
            stringify!(ph_refctr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bread_ctr) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev_iface),
            "::",
            stringify!(bread_ctr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bwrite_ctr) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev_iface),
            "::",
            stringify!(bwrite_ctr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).p_user) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev_iface),
            "::",
            stringify!(p_user)
        )
    );
}
#[doc = "@brief   Definition of the simple block device."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_blockdev {
    #[doc = "@brief Block device interface"]
    pub bdif: *mut ext4_blockdev_iface,
    #[doc = "@brief Offset in bdif. For multi partition mode."]
    pub part_offset: u64,
    #[doc = "@brief Part size in bdif. For multi partition mode."]
    pub part_size: u64,
    #[doc = "@brief   Block cache."]
    pub bc: *mut ext4_bcache,
    #[doc = "@brief   Block size (bytes) logical"]
    pub lg_bsize: u32,
    #[doc = "@brief   Block count: logical"]
    pub lg_bcnt: u64,
    #[doc = "@brief   Cache write back mode reference counter"]
    pub cache_write_back: u32,
    #[doc = "@brief   The filesystem this block device belongs to."]
    pub fs: *mut ext4_fs,
    pub journal: *mut ::core::ffi::c_void,
}
#[test]
fn bindgen_test_layout_ext4_blockdev() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_blockdev> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_blockdev>(),
        72usize,
        concat!("Size of: ", stringify!(ext4_blockdev))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_blockdev>(),
        8usize,
        concat!("Alignment of ", stringify!(ext4_blockdev))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bdif) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev),
            "::",
            stringify!(bdif)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).part_offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev),
            "::",
            stringify!(part_offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).part_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev),
            "::",
            stringify!(part_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bc) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev),
            "::",
            stringify!(bc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lg_bsize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev),
            "::",
            stringify!(lg_bsize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lg_bcnt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev),
            "::",
            stringify!(lg_bcnt)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cache_write_back) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev),
            "::",
            stringify!(cache_write_back)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fs) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev),
            "::",
            stringify!(fs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).journal) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_blockdev),
            "::",
            stringify!(journal)
        )
    );
}
extern "C" {
    #[doc = "@brief   Block device initialization.\n @param   bdev block device descriptor\n @return  standard error code"]
    pub fn ext4_block_init(bdev: *mut ext4_blockdev) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Binds a bcache to block device.\n @param   bdev block device descriptor\n @param   bc block cache descriptor\n @return  standard error code"]
    pub fn ext4_block_bind_bcache(
        bdev: *mut ext4_blockdev,
        bc: *mut ext4_bcache,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Close block device\n @param   bdev block device descriptor\n @return  standard error code"]
    pub fn ext4_block_fini(bdev: *mut ext4_blockdev) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Flush data in given buffer to disk.\n @param   bdev block device descriptor\n @param   buf buffer\n @return  standard error code"]
    pub fn ext4_block_flush_buf(bdev: *mut ext4_blockdev, buf: *mut ext4_buf)
        -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Flush data in buffer of given lba to disk,\n          if that buffer exists in block cache.\n @param   bdev block device descriptor\n @param   lba logical block address\n @return  standard error code"]
    pub fn ext4_block_flush_lba(bdev: *mut ext4_blockdev, lba: u64) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Set logical block size in block device.\n @param   bdev block device descriptor\n @param   lb_bsize logical block size (in bytes)"]
    pub fn ext4_block_set_lb_size(bdev: *mut ext4_blockdev, lb_bsize: u32);
}
extern "C" {
    #[doc = "@brief   Block get function (through cache, don't read).\n @param   bdev block device descriptor\n @param   b block descriptor\n @param   lba logical block address\n @return  standard error code"]
    pub fn ext4_block_get_noread(
        bdev: *mut ext4_blockdev,
        b: *mut ext4_block,
        lba: u64,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Block get function (through cache).\n @param   bdev block device descriptor\n @param   b block descriptor\n @param   lba logical block address\n @return  standard error code"]
    pub fn ext4_block_get(
        bdev: *mut ext4_blockdev,
        b: *mut ext4_block,
        lba: u64,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Block set procedure (through cache).\n @param   bdev block device descriptor\n @param   b block descriptor\n @return  standard error code"]
    pub fn ext4_block_set(bdev: *mut ext4_blockdev, b: *mut ext4_block) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Block read procedure (without cache)\n @param   bdev block device descriptor\n @param   buf output buffer\n @param   lba logical block address\n @return  standard error code"]
    pub fn ext4_blocks_get_direct(
        bdev: *mut ext4_blockdev,
        buf: *mut ::core::ffi::c_void,
        lba: u64,
        cnt: u32,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Block write procedure (without cache)\n @param   bdev block device descriptor\n @param   buf output buffer\n @param   lba logical block address\n @return  standard error code"]
    pub fn ext4_blocks_set_direct(
        bdev: *mut ext4_blockdev,
        buf: *const ::core::ffi::c_void,
        lba: u64,
        cnt: u32,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Write to block device (by direct address).\n @param   bdev block device descriptor\n @param   off byte offset in block device\n @param   buf input buffer\n @param   len length of the write buffer\n @return  standard error code"]
    pub fn ext4_block_writebytes(
        bdev: *mut ext4_blockdev,
        off: u64,
        buf: *const ::core::ffi::c_void,
        len: u32,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Read freom block device (by direct address).\n @param   bdev block device descriptor\n @param   off byte offset in block device\n @param   buf input buffer\n @param   len length of the write buffer\n @return  standard error code"]
    pub fn ext4_block_readbytes(
        bdev: *mut ext4_blockdev,
        off: u64,
        buf: *mut ::core::ffi::c_void,
        len: u32,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Flush all dirty buffers to disk\n @param   bdev block device descriptor\n @return  standard error code"]
    pub fn ext4_block_cache_flush(bdev: *mut ext4_blockdev) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief   Enable/disable write back cache mode\n @param   bdev block device descriptor\n @param   on_off\n              !0 - ENABLE\n               0 - DISABLE (all delayed cache buffers will be flushed)\n @return  standard error code"]
    pub fn ext4_block_cache_write_back(bdev: *mut ext4_blockdev, on_off: u8) -> ::core::ffi::c_int;
}
pub type wchar_t = ::core::ffi::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::core::ffi::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::core::mem::MaybeUninit<max_align_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::core::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type ext4_lblk_t = u32;
pub type ext4_fsblk_t = u64;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_sblock {
    pub inodes_count: u32,
    pub blocks_count_lo: u32,
    pub reserved_blocks_count_lo: u32,
    pub free_blocks_count_lo: u32,
    pub free_inodes_count: u32,
    pub first_data_block: u32,
    pub log_block_size: u32,
    pub log_cluster_size: u32,
    pub blocks_per_group: u32,
    pub frags_per_group: u32,
    pub inodes_per_group: u32,
    pub mount_time: u32,
    pub write_time: u32,
    pub mount_count: u16,
    pub max_mount_count: u16,
    pub magic: u16,
    pub state: u16,
    pub errors: u16,
    pub minor_rev_level: u16,
    pub last_check_time: u32,
    pub check_interval: u32,
    pub creator_os: u32,
    pub rev_level: u32,
    pub def_resuid: u16,
    pub def_resgid: u16,
    pub first_inode: u32,
    pub inode_size: u16,
    pub block_group_index: u16,
    pub features_compatible: u32,
    pub features_incompatible: u32,
    pub features_read_only: u32,
    pub uuid: [u8; 16usize],
    pub volume_name: [::core::ffi::c_char; 16usize],
    pub last_mounted: [::core::ffi::c_char; 64usize],
    pub algorithm_usage_bitmap: u32,
    pub s_prealloc_blocks: u8,
    pub s_prealloc_dir_blocks: u8,
    pub s_reserved_gdt_blocks: u16,
    pub journal_uuid: [u8; 16usize],
    pub journal_inode_number: u32,
    pub journal_dev: u32,
    pub last_orphan: u32,
    pub hash_seed: [u32; 4usize],
    pub default_hash_version: u8,
    pub journal_backup_type: u8,
    pub desc_size: u16,
    pub default_mount_opts: u32,
    pub first_meta_bg: u32,
    pub mkfs_time: u32,
    pub journal_blocks: [u32; 17usize],
    pub blocks_count_hi: u32,
    pub reserved_blocks_count_hi: u32,
    pub free_blocks_count_hi: u32,
    pub min_extra_isize: u16,
    pub want_extra_isize: u16,
    pub flags: u32,
    pub raid_stride: u16,
    pub mmp_interval: u16,
    pub mmp_block: u64,
    pub raid_stripe_width: u32,
    pub log_groups_per_flex: u8,
    pub checksum_type: u8,
    pub reserved_pad: u16,
    pub kbytes_written: u64,
    pub snapshot_inum: u32,
    pub snapshot_id: u32,
    pub snapshot_r_blocks_count: u64,
    pub snapshot_list: u32,
    pub error_count: u32,
    pub first_error_time: u32,
    pub first_error_ino: u32,
    pub first_error_block: u64,
    pub first_error_func: [u8; 32usize],
    pub first_error_line: u32,
    pub last_error_time: u32,
    pub last_error_ino: u32,
    pub last_error_line: u32,
    pub last_error_block: u64,
    pub last_error_func: [u8; 32usize],
    pub mount_opts: [u8; 64usize],
    pub usr_quota_inum: u32,
    pub grp_quota_inum: u32,
    pub overhead_clusters: u32,
    pub backup_bgs: [u32; 2usize],
    pub encrypt_algos: [u8; 4usize],
    pub encrypt_pw_salt: [u8; 16usize],
    pub lpf_ino: u32,
    pub padding: [u32; 100usize],
    pub checksum: u32,
}
#[test]
fn bindgen_test_layout_ext4_sblock() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_sblock> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_sblock>(),
        1024usize,
        concat!("Size of: ", stringify!(ext4_sblock))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_sblock>(),
        1usize,
        concat!("Alignment of ", stringify!(ext4_sblock))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inodes_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(inodes_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).blocks_count_lo) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(blocks_count_lo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved_blocks_count_lo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(reserved_blocks_count_lo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).free_blocks_count_lo) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(free_blocks_count_lo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).free_inodes_count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(free_inodes_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).first_data_block) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(first_data_block)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).log_block_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(log_block_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).log_cluster_size) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(log_cluster_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).blocks_per_group) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(blocks_per_group)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).frags_per_group) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(frags_per_group)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inodes_per_group) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(inodes_per_group)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mount_time) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(mount_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).write_time) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(write_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mount_count) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(mount_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).max_mount_count) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(max_mount_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).magic) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).errors) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(errors)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).minor_rev_level) as usize - ptr as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(minor_rev_level)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).last_check_time) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(last_check_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).check_interval) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(check_interval)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).creator_os) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(creator_os)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rev_level) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(rev_level)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).def_resuid) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(def_resuid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).def_resgid) as usize - ptr as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(def_resgid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).first_inode) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(first_inode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inode_size) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(inode_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).block_group_index) as usize - ptr as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(block_group_index)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).features_compatible) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(features_compatible)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).features_incompatible) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(features_incompatible)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).features_read_only) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(features_read_only)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).volume_name) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(volume_name)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).last_mounted) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(last_mounted)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).algorithm_usage_bitmap) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(algorithm_usage_bitmap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).s_prealloc_blocks) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(s_prealloc_blocks)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).s_prealloc_dir_blocks) as usize - ptr as usize },
        205usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(s_prealloc_dir_blocks)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).s_reserved_gdt_blocks) as usize - ptr as usize },
        206usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(s_reserved_gdt_blocks)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).journal_uuid) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(journal_uuid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).journal_inode_number) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(journal_inode_number)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).journal_dev) as usize - ptr as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(journal_dev)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).last_orphan) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(last_orphan)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hash_seed) as usize - ptr as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(hash_seed)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).default_hash_version) as usize - ptr as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(default_hash_version)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).journal_backup_type) as usize - ptr as usize },
        253usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(journal_backup_type)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).desc_size) as usize - ptr as usize },
        254usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(desc_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).default_mount_opts) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(default_mount_opts)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).first_meta_bg) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(first_meta_bg)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mkfs_time) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(mkfs_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).journal_blocks) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(journal_blocks)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).blocks_count_hi) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(blocks_count_hi)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved_blocks_count_hi) as usize - ptr as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(reserved_blocks_count_hi)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).free_blocks_count_hi) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(free_blocks_count_hi)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).min_extra_isize) as usize - ptr as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(min_extra_isize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).want_extra_isize) as usize - ptr as usize },
        350usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(want_extra_isize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).raid_stride) as usize - ptr as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(raid_stride)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mmp_interval) as usize - ptr as usize },
        358usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(mmp_interval)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mmp_block) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(mmp_block)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).raid_stripe_width) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(raid_stripe_width)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).log_groups_per_flex) as usize - ptr as usize },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(log_groups_per_flex)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).checksum_type) as usize - ptr as usize },
        373usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(checksum_type)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved_pad) as usize - ptr as usize },
        374usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(reserved_pad)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).kbytes_written) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(kbytes_written)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).snapshot_inum) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(snapshot_inum)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).snapshot_id) as usize - ptr as usize },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(snapshot_id)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).snapshot_r_blocks_count) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(snapshot_r_blocks_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).snapshot_list) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(snapshot_list)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).error_count) as usize - ptr as usize },
        404usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(error_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).first_error_time) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(first_error_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).first_error_ino) as usize - ptr as usize },
        412usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(first_error_ino)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).first_error_block) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(first_error_block)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).first_error_func) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(first_error_func)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).first_error_line) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(first_error_line)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).last_error_time) as usize - ptr as usize },
        460usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(last_error_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).last_error_ino) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(last_error_ino)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).last_error_line) as usize - ptr as usize },
        468usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(last_error_line)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).last_error_block) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(last_error_block)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).last_error_func) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(last_error_func)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mount_opts) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(mount_opts)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).usr_quota_inum) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(usr_quota_inum)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).grp_quota_inum) as usize - ptr as usize },
        580usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(grp_quota_inum)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).overhead_clusters) as usize - ptr as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(overhead_clusters)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).backup_bgs) as usize - ptr as usize },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(backup_bgs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).encrypt_algos) as usize - ptr as usize },
        596usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(encrypt_algos)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).encrypt_pw_salt) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(encrypt_pw_salt)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lpf_ino) as usize - ptr as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(lpf_ino)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).checksum) as usize - ptr as usize },
        1020usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_sblock),
            "::",
            stringify!(checksum)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_bgroup {
    pub block_bitmap_lo: u32,
    pub inode_bitmap_lo: u32,
    pub inode_table_first_block_lo: u32,
    pub free_blocks_count_lo: u16,
    pub free_inodes_count_lo: u16,
    pub used_dirs_count_lo: u16,
    pub flags: u16,
    pub exclude_bitmap_lo: u32,
    pub block_bitmap_csum_lo: u16,
    pub inode_bitmap_csum_lo: u16,
    pub itable_unused_lo: u16,
    pub checksum: u16,
    pub block_bitmap_hi: u32,
    pub inode_bitmap_hi: u32,
    pub inode_table_first_block_hi: u32,
    pub free_blocks_count_hi: u16,
    pub free_inodes_count_hi: u16,
    pub used_dirs_count_hi: u16,
    pub itable_unused_hi: u16,
    pub exclude_bitmap_hi: u32,
    pub block_bitmap_csum_hi: u16,
    pub inode_bitmap_csum_hi: u16,
    pub reserved: u32,
}
#[test]
fn bindgen_test_layout_ext4_bgroup() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_bgroup> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_bgroup>(),
        64usize,
        concat!("Size of: ", stringify!(ext4_bgroup))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_bgroup>(),
        4usize,
        concat!("Alignment of ", stringify!(ext4_bgroup))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).block_bitmap_lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(block_bitmap_lo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inode_bitmap_lo) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(inode_bitmap_lo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inode_table_first_block_lo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(inode_table_first_block_lo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).free_blocks_count_lo) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(free_blocks_count_lo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).free_inodes_count_lo) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(free_inodes_count_lo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).used_dirs_count_lo) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(used_dirs_count_lo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).exclude_bitmap_lo) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(exclude_bitmap_lo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).block_bitmap_csum_lo) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(block_bitmap_csum_lo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inode_bitmap_csum_lo) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(inode_bitmap_csum_lo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).itable_unused_lo) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(itable_unused_lo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).checksum) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(checksum)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).block_bitmap_hi) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(block_bitmap_hi)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inode_bitmap_hi) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(inode_bitmap_hi)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inode_table_first_block_hi) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(inode_table_first_block_hi)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).free_blocks_count_hi) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(free_blocks_count_hi)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).free_inodes_count_hi) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(free_inodes_count_hi)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).used_dirs_count_hi) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(used_dirs_count_hi)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).itable_unused_hi) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(itable_unused_hi)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).exclude_bitmap_hi) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(exclude_bitmap_hi)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).block_bitmap_csum_hi) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(block_bitmap_csum_hi)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inode_bitmap_csum_hi) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(inode_bitmap_csum_hi)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_bgroup),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct ext4_inode {
    pub mode: u16,
    pub uid: u16,
    pub size_lo: u32,
    pub access_time: u32,
    pub change_inode_time: u32,
    pub modification_time: u32,
    pub deletion_time: u32,
    pub gid: u16,
    pub links_count: u16,
    pub blocks_count_lo: u32,
    pub flags: u32,
    pub unused_osd1: u32,
    pub blocks: [u32; 15usize],
    pub generation: u32,
    pub file_acl_lo: u32,
    pub size_hi: u32,
    pub obso_faddr: u32,
    pub osd2: ext4_inode__bindgen_ty_1,
    pub extra_isize: u16,
    pub checksum_hi: u16,
    pub ctime_extra: u32,
    pub mtime_extra: u32,
    pub atime_extra: u32,
    pub crtime: u32,
    pub crtime_extra: u32,
    pub version_hi: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ext4_inode__bindgen_ty_1 {
    pub linux2: ext4_inode__bindgen_ty_1__bindgen_ty_1,
    pub hurd2: ext4_inode__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_inode__bindgen_ty_1__bindgen_ty_1 {
    pub blocks_high: u16,
    pub file_acl_high: u16,
    pub uid_high: u16,
    pub gid_high: u16,
    pub checksum_lo: u16,
    pub reserved2: u16,
}
#[test]
fn bindgen_test_layout_ext4_inode__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_inode__bindgen_ty_1__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_inode__bindgen_ty_1__bindgen_ty_1>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(ext4_inode__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_inode__bindgen_ty_1__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ext4_inode__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).blocks_high) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(blocks_high)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).file_acl_high) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(file_acl_high)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).uid_high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(uid_high)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gid_high) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(gid_high)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).checksum_lo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(checksum_lo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved2)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_inode__bindgen_ty_1__bindgen_ty_2 {
    pub reserved1: u16,
    pub mode_high: u16,
    pub uid_high: u16,
    pub gid_high: u16,
    pub author: u32,
}
#[test]
fn bindgen_test_layout_ext4_inode__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_inode__bindgen_ty_1__bindgen_ty_2> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_inode__bindgen_ty_1__bindgen_ty_2>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(ext4_inode__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_inode__bindgen_ty_1__bindgen_ty_2>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ext4_inode__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mode_high) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(mode_high)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).uid_high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(uid_high)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gid_high) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(gid_high)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).author) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(author)
        )
    );
}
#[test]
fn bindgen_test_layout_ext4_inode__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_inode__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_inode__bindgen_ty_1>(),
        12usize,
        concat!("Size of: ", stringify!(ext4_inode__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_inode__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(ext4_inode__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).linux2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode__bindgen_ty_1),
            "::",
            stringify!(linux2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hurd2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode__bindgen_ty_1),
            "::",
            stringify!(hurd2)
        )
    );
}
#[test]
fn bindgen_test_layout_ext4_inode() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_inode> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_inode>(),
        156usize,
        concat!("Size of: ", stringify!(ext4_inode))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_inode>(),
        1usize,
        concat!("Alignment of ", stringify!(ext4_inode))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).uid) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(uid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).size_lo) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(size_lo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).access_time) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(access_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).change_inode_time) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(change_inode_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).modification_time) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(modification_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).deletion_time) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(deletion_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(gid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).links_count) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(links_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).blocks_count_lo) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(blocks_count_lo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).unused_osd1) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(unused_osd1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).blocks) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(blocks)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).generation) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).file_acl_lo) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(file_acl_lo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).size_hi) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(size_hi)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).obso_faddr) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(obso_faddr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).osd2) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(osd2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).extra_isize) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(extra_isize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).checksum_hi) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(checksum_hi)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ctime_extra) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(ctime_extra)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mtime_extra) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(mtime_extra)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).atime_extra) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(atime_extra)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).crtime) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(crtime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).crtime_extra) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(crtime_extra)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).version_hi) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_inode),
            "::",
            stringify!(version_hi)
        )
    );
}
pub const EXT4_DE_UNKNOWN: _bindgen_ty_1 = 0;
pub const EXT4_DE_REG_FILE: _bindgen_ty_1 = 1;
pub const EXT4_DE_DIR: _bindgen_ty_1 = 2;
pub const EXT4_DE_CHRDEV: _bindgen_ty_1 = 3;
pub const EXT4_DE_BLKDEV: _bindgen_ty_1 = 4;
pub const EXT4_DE_FIFO: _bindgen_ty_1 = 5;
pub const EXT4_DE_SOCK: _bindgen_ty_1 = 6;
pub const EXT4_DE_SYMLINK: _bindgen_ty_1 = 7;
#[doc = "@brief   Directory entry types."]
pub type _bindgen_ty_1 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union ext4_dir_en_internal {
    pub name_length_high: u8,
    pub inode_type: u8,
}
#[test]
fn bindgen_test_layout_ext4_dir_en_internal() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_dir_en_internal> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_dir_en_internal>(),
        1usize,
        concat!("Size of: ", stringify!(ext4_dir_en_internal))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_dir_en_internal>(),
        1usize,
        concat!("Alignment of ", stringify!(ext4_dir_en_internal))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).name_length_high) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_en_internal),
            "::",
            stringify!(name_length_high)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inode_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_en_internal),
            "::",
            stringify!(inode_type)
        )
    );
}
#[doc = " Linked list directory entry structure"]
#[repr(C, packed)]
pub struct ext4_dir_en {
    pub inode: u32,
    pub entry_len: u16,
    pub name_len: u8,
    pub in_: ext4_dir_en_internal,
    pub name: __IncompleteArrayField<u8>,
}
#[test]
fn bindgen_test_layout_ext4_dir_en() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_dir_en> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_dir_en>(),
        8usize,
        concat!("Size of: ", stringify!(ext4_dir_en))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_dir_en>(),
        1usize,
        concat!("Alignment of ", stringify!(ext4_dir_en))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_en),
            "::",
            stringify!(inode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).entry_len) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_en),
            "::",
            stringify!(entry_len)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).name_len) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_en),
            "::",
            stringify!(name_len)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).in_) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_en),
            "::",
            stringify!(in_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_en),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_dir_idx_climit {
    pub limit: u16,
    pub count: u16,
}
#[test]
fn bindgen_test_layout_ext4_dir_idx_climit() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_dir_idx_climit> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_dir_idx_climit>(),
        4usize,
        concat!("Size of: ", stringify!(ext4_dir_idx_climit))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_dir_idx_climit>(),
        1usize,
        concat!("Alignment of ", stringify!(ext4_dir_idx_climit))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).limit) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_climit),
            "::",
            stringify!(limit)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_climit),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_dir_idx_dot_en {
    pub inode: u32,
    pub entry_length: u16,
    pub name_length: u8,
    pub inode_type: u8,
    pub name: [u8; 4usize],
}
#[test]
fn bindgen_test_layout_ext4_dir_idx_dot_en() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_dir_idx_dot_en> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_dir_idx_dot_en>(),
        12usize,
        concat!("Size of: ", stringify!(ext4_dir_idx_dot_en))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_dir_idx_dot_en>(),
        1usize,
        concat!("Alignment of ", stringify!(ext4_dir_idx_dot_en))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_dot_en),
            "::",
            stringify!(inode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).entry_length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_dot_en),
            "::",
            stringify!(entry_length)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).name_length) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_dot_en),
            "::",
            stringify!(name_length)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inode_type) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_dot_en),
            "::",
            stringify!(inode_type)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_dot_en),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_dir_idx_rinfo {
    pub reserved_zero: u32,
    pub hash_version: u8,
    pub info_length: u8,
    pub indirect_levels: u8,
    pub unused_flags: u8,
}
#[test]
fn bindgen_test_layout_ext4_dir_idx_rinfo() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_dir_idx_rinfo> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_dir_idx_rinfo>(),
        8usize,
        concat!("Size of: ", stringify!(ext4_dir_idx_rinfo))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_dir_idx_rinfo>(),
        1usize,
        concat!("Alignment of ", stringify!(ext4_dir_idx_rinfo))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved_zero) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_rinfo),
            "::",
            stringify!(reserved_zero)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hash_version) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_rinfo),
            "::",
            stringify!(hash_version)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).info_length) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_rinfo),
            "::",
            stringify!(info_length)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).indirect_levels) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_rinfo),
            "::",
            stringify!(indirect_levels)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).unused_flags) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_rinfo),
            "::",
            stringify!(unused_flags)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_dir_idx_entry {
    pub hash: u32,
    pub block: u32,
}
#[test]
fn bindgen_test_layout_ext4_dir_idx_entry() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_dir_idx_entry> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_dir_idx_entry>(),
        8usize,
        concat!("Size of: ", stringify!(ext4_dir_idx_entry))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_dir_idx_entry>(),
        1usize,
        concat!("Alignment of ", stringify!(ext4_dir_idx_entry))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_entry),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).block) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_entry),
            "::",
            stringify!(block)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct ext4_dir_idx_root {
    pub dots: [ext4_dir_idx_dot_en; 2usize],
    pub info: ext4_dir_idx_rinfo,
    pub en: __IncompleteArrayField<ext4_dir_idx_entry>,
}
#[test]
fn bindgen_test_layout_ext4_dir_idx_root() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_dir_idx_root> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_dir_idx_root>(),
        32usize,
        concat!("Size of: ", stringify!(ext4_dir_idx_root))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_dir_idx_root>(),
        1usize,
        concat!("Alignment of ", stringify!(ext4_dir_idx_root))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dots) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_root),
            "::",
            stringify!(dots)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_root),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).en) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_root),
            "::",
            stringify!(en)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_fake_dir_entry {
    pub inode: u32,
    pub entry_length: u16,
    pub name_length: u8,
    pub inode_type: u8,
}
#[test]
fn bindgen_test_layout_ext4_fake_dir_entry() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_fake_dir_entry> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_fake_dir_entry>(),
        8usize,
        concat!("Size of: ", stringify!(ext4_fake_dir_entry))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_fake_dir_entry>(),
        1usize,
        concat!("Alignment of ", stringify!(ext4_fake_dir_entry))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_fake_dir_entry),
            "::",
            stringify!(inode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).entry_length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_fake_dir_entry),
            "::",
            stringify!(entry_length)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).name_length) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_fake_dir_entry),
            "::",
            stringify!(name_length)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inode_type) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_fake_dir_entry),
            "::",
            stringify!(inode_type)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct ext4_dir_idx_node {
    pub fake: ext4_fake_dir_entry,
    pub entries: __IncompleteArrayField<ext4_dir_idx_entry>,
}
#[test]
fn bindgen_test_layout_ext4_dir_idx_node() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_dir_idx_node> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_dir_idx_node>(),
        8usize,
        concat!("Size of: ", stringify!(ext4_dir_idx_node))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_dir_idx_node>(),
        1usize,
        concat!("Alignment of ", stringify!(ext4_dir_idx_node))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fake) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_node),
            "::",
            stringify!(fake)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).entries) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_node),
            "::",
            stringify!(entries)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_dir_idx_tail {
    pub reserved: u32,
    pub checksum: u32,
}
#[test]
fn bindgen_test_layout_ext4_dir_idx_tail() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_dir_idx_tail> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_dir_idx_tail>(),
        8usize,
        concat!("Size of: ", stringify!(ext4_dir_idx_tail))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_dir_idx_tail>(),
        1usize,
        concat!("Alignment of ", stringify!(ext4_dir_idx_tail))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_tail),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).checksum) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_idx_tail),
            "::",
            stringify!(checksum)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_dir_entry_tail {
    pub reserved_zero1: u32,
    pub rec_len: u16,
    pub reserved_zero2: u8,
    pub reserved_ft: u8,
    pub checksum: u32,
}
#[test]
fn bindgen_test_layout_ext4_dir_entry_tail() {
    const UNINIT: ::core::mem::MaybeUninit<ext4_dir_entry_tail> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ext4_dir_entry_tail>(),
        12usize,
        concat!("Size of: ", stringify!(ext4_dir_entry_tail))
    );
    assert_eq!(
        ::core::mem::align_of::<ext4_dir_entry_tail>(),
        1usize,
        concat!("Alignment of ", stringify!(ext4_dir_entry_tail))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved_zero1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_entry_tail),
            "::",
            stringify!(reserved_zero1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rec_len) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_entry_tail),
            "::",
            stringify!(rec_len)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved_zero2) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_entry_tail),
            "::",
            stringify!(reserved_zero2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved_ft) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_entry_tail),
            "::",
            stringify!(reserved_ft)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).checksum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ext4_dir_entry_tail),
            "::",
            stringify!(checksum)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct jbd_bhdr {
    pub magic: u32,
    pub blocktype: u32,
    pub sequence: u32,
}
#[test]
fn bindgen_test_layout_jbd_bhdr() {
    const UNINIT: ::core::mem::MaybeUninit<jbd_bhdr> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<jbd_bhdr>(),
        12usize,
        concat!("Size of: ", stringify!(jbd_bhdr))
    );
    assert_eq!(
        ::core::mem::align_of::<jbd_bhdr>(),
        1usize,
        concat!("Alignment of ", stringify!(jbd_bhdr))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).magic) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_bhdr),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).blocktype) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_bhdr),
            "::",
            stringify!(blocktype)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sequence) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_bhdr),
            "::",
            stringify!(sequence)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct jbd_commit_header {
    pub header: jbd_bhdr,
    pub chksum_type: u8,
    pub chksum_size: u8,
    pub padding: [u8; 2usize],
    pub chksum: [u32; 8usize],
    pub commit_sec: u64,
    pub commit_nsec: u32,
}
#[test]
fn bindgen_test_layout_jbd_commit_header() {
    const UNINIT: ::core::mem::MaybeUninit<jbd_commit_header> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<jbd_commit_header>(),
        60usize,
        concat!("Size of: ", stringify!(jbd_commit_header))
    );
    assert_eq!(
        ::core::mem::align_of::<jbd_commit_header>(),
        1usize,
        concat!("Alignment of ", stringify!(jbd_commit_header))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_commit_header),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).chksum_type) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_commit_header),
            "::",
            stringify!(chksum_type)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).chksum_size) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_commit_header),
            "::",
            stringify!(chksum_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_commit_header),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).chksum) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_commit_header),
            "::",
            stringify!(chksum)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).commit_sec) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_commit_header),
            "::",
            stringify!(commit_sec)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).commit_nsec) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_commit_header),
            "::",
            stringify!(commit_nsec)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct jbd_block_tag3 {
    pub blocknr: u32,
    pub flags: u32,
    pub blocknr_high: u32,
    pub checksum: u32,
}
#[test]
fn bindgen_test_layout_jbd_block_tag3() {
    const UNINIT: ::core::mem::MaybeUninit<jbd_block_tag3> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<jbd_block_tag3>(),
        16usize,
        concat!("Size of: ", stringify!(jbd_block_tag3))
    );
    assert_eq!(
        ::core::mem::align_of::<jbd_block_tag3>(),
        1usize,
        concat!("Alignment of ", stringify!(jbd_block_tag3))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).blocknr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_block_tag3),
            "::",
            stringify!(blocknr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_block_tag3),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).blocknr_high) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_block_tag3),
            "::",
            stringify!(blocknr_high)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).checksum) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_block_tag3),
            "::",
            stringify!(checksum)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct jbd_block_tag {
    pub blocknr: u32,
    pub checksum: u16,
    pub flags: u16,
    pub blocknr_high: u32,
}
#[test]
fn bindgen_test_layout_jbd_block_tag() {
    const UNINIT: ::core::mem::MaybeUninit<jbd_block_tag> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<jbd_block_tag>(),
        12usize,
        concat!("Size of: ", stringify!(jbd_block_tag))
    );
    assert_eq!(
        ::core::mem::align_of::<jbd_block_tag>(),
        1usize,
        concat!("Alignment of ", stringify!(jbd_block_tag))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).blocknr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_block_tag),
            "::",
            stringify!(blocknr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).checksum) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_block_tag),
            "::",
            stringify!(checksum)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_block_tag),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).blocknr_high) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_block_tag),
            "::",
            stringify!(blocknr_high)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct jbd_block_tail {
    pub checksum: u32,
}
#[test]
fn bindgen_test_layout_jbd_block_tail() {
    const UNINIT: ::core::mem::MaybeUninit<jbd_block_tail> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<jbd_block_tail>(),
        4usize,
        concat!("Size of: ", stringify!(jbd_block_tail))
    );
    assert_eq!(
        ::core::mem::align_of::<jbd_block_tail>(),
        1usize,
        concat!("Alignment of ", stringify!(jbd_block_tail))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).checksum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_block_tail),
            "::",
            stringify!(checksum)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct jbd_revoke_header {
    pub header: jbd_bhdr,
    pub count: u32,
}
#[test]
fn bindgen_test_layout_jbd_revoke_header() {
    const UNINIT: ::core::mem::MaybeUninit<jbd_revoke_header> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<jbd_revoke_header>(),
        16usize,
        concat!("Size of: ", stringify!(jbd_revoke_header))
    );
    assert_eq!(
        ::core::mem::align_of::<jbd_revoke_header>(),
        1usize,
        concat!("Alignment of ", stringify!(jbd_revoke_header))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_revoke_header),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_revoke_header),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct jbd_revoke_tail {
    pub checksum: u32,
}
#[test]
fn bindgen_test_layout_jbd_revoke_tail() {
    const UNINIT: ::core::mem::MaybeUninit<jbd_revoke_tail> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<jbd_revoke_tail>(),
        4usize,
        concat!("Size of: ", stringify!(jbd_revoke_tail))
    );
    assert_eq!(
        ::core::mem::align_of::<jbd_revoke_tail>(),
        1usize,
        concat!("Alignment of ", stringify!(jbd_revoke_tail))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).checksum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_revoke_tail),
            "::",
            stringify!(checksum)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct jbd_sb {
    pub header: jbd_bhdr,
    pub blocksize: u32,
    pub maxlen: u32,
    pub first: u32,
    pub sequence: u32,
    pub start: u32,
    pub error_val: i32,
    pub feature_compat: u32,
    pub feature_incompat: u32,
    pub feature_ro_compat: u32,
    pub uuid: [u8; 16usize],
    pub nr_users: u32,
    pub dynsuper: u32,
    pub max_transaction: u32,
    pub max_trandata: u32,
    pub checksum_type: u8,
    pub padding2: [u8; 3usize],
    pub padding: [u32; 42usize],
    pub checksum: u32,
    pub users: [u8; 768usize],
}
#[test]
fn bindgen_test_layout_jbd_sb() {
    const UNINIT: ::core::mem::MaybeUninit<jbd_sb> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<jbd_sb>(),
        1024usize,
        concat!("Size of: ", stringify!(jbd_sb))
    );
    assert_eq!(
        ::core::mem::align_of::<jbd_sb>(),
        1usize,
        concat!("Alignment of ", stringify!(jbd_sb))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).blocksize) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(blocksize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxlen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(maxlen)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).first) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(first)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sequence) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(sequence)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).error_val) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(error_val)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).feature_compat) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(feature_compat)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).feature_incompat) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(feature_incompat)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).feature_ro_compat) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(feature_ro_compat)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nr_users) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(nr_users)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dynsuper) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(dynsuper)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).max_transaction) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(max_transaction)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).max_trandata) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(max_trandata)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).checksum_type) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(checksum_type)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).padding2) as usize - ptr as usize },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(padding2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).checksum) as usize - ptr as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(checksum)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).users) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(jbd_sb),
            "::",
            stringify!(users)
        )
    );
}
extern "C" {
    #[doc = "@brief Get mode of the i-node.\n @param sb    Superblock\n @param inode I-node to load mode from\n @return Mode of the i-node"]
    pub fn ext4_inode_get_mode(sb: *mut ext4_sblock, inode: *mut ext4_inode) -> u32;
}
extern "C" {
    #[doc = "@brief Set mode of the i-node.\n @param sb    Superblock\n @param inode I-node to set mode to\n @param mode  Mode to set to i-node"]
    pub fn ext4_inode_set_mode(sb: *mut ext4_sblock, inode: *mut ext4_inode, mode: u32);
}
extern "C" {
    #[doc = "@brief Get ID of the i-node owner (user id).\n @param inode I-node to load uid from\n @return User ID of the i-node owner"]
    pub fn ext4_inode_get_uid(inode: *mut ext4_inode) -> u32;
}
extern "C" {
    #[doc = "@brief Set ID of the i-node owner.\n @param inode I-node to set uid to\n @param uid   ID of the i-node owner"]
    pub fn ext4_inode_set_uid(inode: *mut ext4_inode, uid: u32);
}
extern "C" {
    #[doc = "@brief Get real i-node size.\n @param sb    Superblock\n @param inode I-node to load size from\n @return Real size of i-node"]
    pub fn ext4_inode_get_size(sb: *mut ext4_sblock, inode: *mut ext4_inode) -> u64;
}
extern "C" {
    #[doc = "@brief Set real i-node size.\n @param inode I-node to set size to\n @param size  Size of the i-node"]
    pub fn ext4_inode_set_size(inode: *mut ext4_inode, size: u64);
}
extern "C" {
    #[doc = "@brief Get time, when i-node was last accessed.\n @param inode I-node\n @return Time of the last access (POSIX)"]
    pub fn ext4_inode_get_access_time(inode: *mut ext4_inode) -> u32;
}
extern "C" {
    #[doc = "@brief Set time, when i-node was last accessed.\n @param inode I-node\n @param time  Time of the last access (POSIX)"]
    pub fn ext4_inode_set_access_time(inode: *mut ext4_inode, time: u32);
}
extern "C" {
    #[doc = "@brief Get time, when i-node was last changed.\n @param inode I-node\n @return Time of the last change (POSIX)"]
    pub fn ext4_inode_get_change_inode_time(inode: *mut ext4_inode) -> u32;
}
extern "C" {
    #[doc = "@brief Set time, when i-node was last changed.\n @param inode I-node\n @param time  Time of the last change (POSIX)"]
    pub fn ext4_inode_set_change_inode_time(inode: *mut ext4_inode, time: u32);
}
extern "C" {
    #[doc = "@brief Get time, when i-node content was last modified.\n @param inode I-node\n @return Time of the last content modification (POSIX)"]
    pub fn ext4_inode_get_modif_time(inode: *mut ext4_inode) -> u32;
}
extern "C" {
    #[doc = "@brief Set time, when i-node content was last modified.\n @param inode I-node\n @param time  Time of the last content modification (POSIX)"]
    pub fn ext4_inode_set_modif_time(inode: *mut ext4_inode, time: u32);
}
extern "C" {
    #[doc = "@brief Get time, when i-node was deleted.\n @param inode I-node\n @return Time of the delete action (POSIX)"]
    pub fn ext4_inode_get_del_time(inode: *mut ext4_inode) -> u32;
}
extern "C" {
    #[doc = "@brief Set time, when i-node was deleted.\n @param inode I-node\n @param time  Time of the delete action (POSIX)"]
    pub fn ext4_inode_set_del_time(inode: *mut ext4_inode, time: u32);
}
extern "C" {
    #[doc = "@brief Get ID of the i-node owner's group.\n @param inode I-node to load gid from\n @return Group ID of the i-node owner"]
    pub fn ext4_inode_get_gid(inode: *mut ext4_inode) -> u32;
}
extern "C" {
    #[doc = "@brief Set ID to the i-node owner's group.\n @param inode I-node to set gid to\n @param gid   Group ID of the i-node owner"]
    pub fn ext4_inode_set_gid(inode: *mut ext4_inode, gid: u32);
}
extern "C" {
    #[doc = "@brief Get number of links to i-node.\n @param inode I-node to load number of links from\n @return Number of links to i-node"]
    pub fn ext4_inode_get_links_cnt(inode: *mut ext4_inode) -> u16;
}
extern "C" {
    #[doc = "@brief Set number of links to i-node.\n @param inode I-node to set number of links to\n @param cnt Number of links to i-node"]
    pub fn ext4_inode_set_links_cnt(inode: *mut ext4_inode, cnt: u16);
}
extern "C" {
    #[doc = "@brief Get number of 512-bytes blocks used for i-node.\n @param sb    Superblock\n @param inode I-node\n @return Number of 512-bytes blocks"]
    pub fn ext4_inode_get_blocks_count(sb: *mut ext4_sblock, inode: *mut ext4_inode) -> u64;
}
extern "C" {
    #[doc = "@brief Set number of 512-bytes blocks used for i-node.\n @param sb    Superblock\n @param inode I-node\n @param cnt Number of 512-bytes blocks\n @return Error code"]
    pub fn ext4_inode_set_blocks_count(
        sb: *mut ext4_sblock,
        inode: *mut ext4_inode,
        cnt: u64,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "@brief Get flags (features) of i-node.\n @param inode I-node to get flags from\n @return Flags (bitmap)"]
    pub fn ext4_inode_get_flags(inode: *mut ext4_inode) -> u32;
}
extern "C" {
    #[doc = "@brief Set flags (features) of i-node.\n @param inode I-node to set flags to\n @param flags Flags to set to i-node"]
    pub fn ext4_inode_set_flags(inode: *mut ext4_inode, flags: u32);
}
extern "C" {
    #[doc = "@brief Get file generation (used by NFS).\n @param inode I-node\n @return File generation"]
    pub fn ext4_inode_get_generation(inode: *mut ext4_inode) -> u32;
}
extern "C" {
    #[doc = "@brief Set file generation (used by NFS).\n @param inode      I-node\n @param gen File generation"]
    pub fn ext4_inode_set_generation(inode: *mut ext4_inode, gen: u32);
}
extern "C" {
    #[doc = "@brief Get extra I-node size field.\n @param sb         Superblock\n @param inode      I-node\n @return extra I-node size"]
    pub fn ext4_inode_get_extra_isize(sb: *mut ext4_sblock, inode: *mut ext4_inode) -> u16;
}
extern "C" {
    #[doc = "@brief Set extra I-node size field.\n @param sb         Superblock\n @param inode      I-node\n @param size       extra I-node size"]
    pub fn ext4_inode_set_extra_isize(sb: *mut ext4_sblock, inode: *mut ext4_inode, size: u16);
}
extern "C" {
    #[doc = "@brief Get address of block, where are extended attributes located.\n @param inode I-node\n @param sb    Superblock\n @return Block address"]
    pub fn ext4_inode_get_file_acl(inode: *mut ext4_inode, sb: *mut ext4_sblock) -> u64;
}
extern "C" {
    #[doc = "@brief Set address of block, where are extended attributes located.\n @param inode    I-node\n @param sb       Superblock\n @param acl Block address"]
    pub fn ext4_inode_set_file_acl(inode: *mut ext4_inode, sb: *mut ext4_sblock, acl: u64);
}
extern "C" {
    #[doc = "@brief Get block address of specified direct block.\n @param inode I-node to load block from\n @param idx   Index of logical block\n @return Physical block address"]
    pub fn ext4_inode_get_direct_block(inode: *mut ext4_inode, idx: u32) -> u32;
}
extern "C" {
    #[doc = "@brief Set block address of specified direct block.\n @param inode  I-node to set block address to\n @param idx    Index of logical block\n @param block Physical block address"]
    pub fn ext4_inode_set_direct_block(inode: *mut ext4_inode, idx: u32, block: u32);
}
extern "C" {
    #[doc = "@brief Get block address of specified indirect block.\n @param inode I-node to get block address from\n @param idx   Index of indirect block\n @return Physical block address"]
    pub fn ext4_inode_get_indirect_block(inode: *mut ext4_inode, idx: u32) -> u32;
}
extern "C" {
    #[doc = "@brief Set block address of specified indirect block.\n @param inode  I-node to set block address to\n @param idx    Index of indirect block\n @param block Physical block address"]
    pub fn ext4_inode_set_indirect_block(inode: *mut ext4_inode, idx: u32, block: u32);
}
extern "C" {
    #[doc = "@brief Get device number\n @param inode  I-node to get device number from\n @return Device number"]
    pub fn ext4_inode_get_dev(inode: *mut ext4_inode) -> u32;
}
extern "C" {
    #[doc = "@brief Set device number\n @param inode  I-node to set device number to\n @param dev    Device number"]
    pub fn ext4_inode_set_dev(inode: *mut ext4_inode, dev: u32);
}
extern "C" {
    #[doc = "@brief return the type of i-node\n @param sb    Superblock\n @param inode I-node to return the type of\n @return Result of check operation"]
    pub fn ext4_inode_type(sb: *mut ext4_sblock, inode: *mut ext4_inode) -> u32;
}
extern "C" {
    #[doc = "@brief Check if i-node has specified type.\n @param sb    Superblock\n @param inode I-node to check type of\n @param type  Type to check\n @return Result of check operation"]
    pub fn ext4_inode_is_type(sb: *mut ext4_sblock, inode: *mut ext4_inode, type_: u32) -> bool;
}
extern "C" {
    #[doc = "@brief Check if i-node has specified flag.\n @param inode I-node to check flags of\n @param f  Flag to check\n @return Result of check operation"]
    pub fn ext4_inode_has_flag(inode: *mut ext4_inode, f: u32) -> bool;
}
extern "C" {
    #[doc = "@brief Remove specified flag from i-node.\n @param inode      I-node to clear flag on\n @param f Flag to be cleared"]
    pub fn ext4_inode_clear_flag(inode: *mut ext4_inode, f: u32);
}
extern "C" {
    #[doc = "@brief Set specified flag to i-node.\n @param inode    I-node to set flag on\n @param f Flag to be set"]
    pub fn ext4_inode_set_flag(inode: *mut ext4_inode, f: u32);
}
extern "C" {
    #[doc = "@brief Get inode checksum(crc32)\n @param sb    Superblock\n @param inode I-node to get checksum value from"]
    pub fn ext4_inode_get_csum(sb: *mut ext4_sblock, inode: *mut ext4_inode) -> u32;
}
extern "C" {
    #[doc = "@brief Get inode checksum(crc32)\n @param sb    Superblock\n @param inode I-node to get checksum value from"]
    pub fn ext4_inode_set_csum(sb: *mut ext4_sblock, inode: *mut ext4_inode, checksum: u32);
}
extern "C" {
    #[doc = "@brief Check if i-node can be truncated.\n @param sb    Superblock\n @param inode I-node to check\n @return Result of the check operation"]
    pub fn ext4_inode_can_truncate(sb: *mut ext4_sblock, inode: *mut ext4_inode) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_extent_header {
    _unused: [u8; 0],
}
extern "C" {
    #[doc = "@brief Get extent header from the root of the extent tree.\n @param inode I-node to get extent header from\n @return Pointer to extent header of the root node"]
    pub fn ext4_inode_get_extent_header(inode: *mut ext4_inode) -> *mut ext4_extent_header;
}
#[doc = "@brief   The filesystem this block device belongs to."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_fs {
    pub _address: u8,
}
